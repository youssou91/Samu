{"version":3,"file":"seed.js","names":["mongoose","require","bcrypt","v4","uuidv4","logger","generateDossierNumber","Utilisateur","RendezVous","connectDB","utilisateursDemo","_id","Types","ObjectId","nom","prenom","email","motDePasse","role","telephone","dateNaissance","Date","adresse","rue","codePostal","ville","pays","emailVerifie","specialite","numeroSecuriteSociale","seedDatabase","info","Promise","all","deleteMany","utilisateursAvecMdpHache","map","utilisateur","salt","genSalt","motDePasseHache","hash","utilisateursCrees","insertMany","length","medecin","find","u","patient","Error","maintenant","rendezVousDemo","numeroDossier","patientId","patientNom","patientTelephone","medecinId","medecinNom","dateDebut","now","getTime","dateFin","type","motif","statut","duree","notes","createdAt","updatedAt","rendezVousCrees","console","log","process","exit","error","main","module","exports"],"sources":["../../src/config/seed.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst { v4: uuidv4 } = require('uuid');\nconst logger = require('./logger');\nconst { generateDossierNumber } = require('../utils');\n\n// Modèles\nconst Utilisateur = require('../models/Utilisateur');\nconst RendezVous = require('../models/RendezVous');\nconst { connectDB } = require('./database');\n\n// Données de démonstration\nconst utilisateursDemo = [\n  {\n    _id: new mongoose.Types.ObjectId(),\n    nom: 'Admin',\n    prenom: 'Système',\n    email: 'admin@example.com',\n    motDePasse: 'Admin123!',\n    role: 'admin',\n    telephone: '0612345678',\n    dateNaissance: new Date('1990-01-01'),\n    adresse: {\n      rue: '1 rue de la Paix',\n      codePostal: '75001',\n      ville: 'Paris',\n      pays: 'France',\n    },\n    emailVerifie: true,\n  },\n  {\n    _id: new mongoose.Types.ObjectId(),\n    nom: 'Dupont',\n    prenom: 'Jean',\n    email: 'jean.dupont@example.com',\n    motDePasse: 'Medecin123!',\n    role: 'medecin',\n    specialite: 'Médecine Générale',\n    telephone: '0698765432',\n    dateNaissance: new Date('1985-05-15'),\n    adresse: {\n      rue: '15 Avenue des Champs-Élysées',\n      codePostal: '75008',\n      ville: 'Paris',\n      pays: 'France',\n    },\n    emailVerifie: true,\n  },\n  {\n    _id: new mongoose.Types.ObjectId(),\n    nom: 'Martin',\n    prenom: 'Sophie',\n    email: 'sophie.martin@example.com',\n    motDePasse: 'Secretaire123!',\n    role: 'secretaire',\n    telephone: '0678912345',\n    dateNaissance: new Date('1992-08-20'),\n    adresse: {\n      rue: '25 Rue de Rivoli',\n      codePostal: '75004',\n      ville: 'Paris',\n      pays: 'France',\n    },\n    emailVerifie: true,\n  },\n  {\n    _id: new mongoose.Types.ObjectId(),\n    nom: 'Durand',\n    prenom: 'Marie',\n    email: 'marie.durand@example.com',\n    motDePasse: 'Patient123!',\n    role: 'patient',\n    telephone: '0687654321',\n    dateNaissance: new Date('1995-11-10'),\n    adresse: {\n      rue: '10 Rue de la République',\n      codePostal: '69002',\n      ville: 'Lyon',\n      pays: 'France',\n    },\n    numeroSecuriteSociale: '189127512345678',\n    emailVerifie: true,\n  },\n];\n\n/**\n * Initialise la base de données avec des données de démonstration\n */\nconst seedDatabase = async () => {\n  try {\n    // Connexion à la base de données\n    await connectDB();\n    \n    logger.info('Début de l\\'initialisation de la base de données...');\n    \n    // Supprimer toutes les données existantes\n    await Promise.all([\n      Utilisateur.deleteMany({}),\n      RendezVous.deleteMany({}),\n    ]);\n    \n    logger.info('Anciennes données supprimées avec succès');\n    \n    // Hacher les mots de passe\n    const utilisateursAvecMdpHache = await Promise.all(\n      utilisateursDemo.map(async (utilisateur) => {\n        const salt = await bcrypt.genSalt(10);\n        const motDePasseHache = await bcrypt.hash(utilisateur.motDePasse, salt);\n        return {\n          ...utilisateur,\n          motDePasse: motDePasseHache,\n        };\n      })\n    );\n    \n    // Créer les utilisateurs\n    const utilisateursCrees = await Utilisateur.insertMany(utilisateursAvecMdpHache);\n    logger.info(`${utilisateursCrees.length} utilisateurs créés avec succès`);\n    \n    // Récupérer l'ID du médecin et du patient\n    const medecin = utilisateursCrees.find(u => u.role === 'medecin');\n    const patient = utilisateursCrees.find(u => u.role === 'patient');\n    \n    if (!medecin || !patient) {\n      throw new Error('Médecin ou patient non trouvé dans les données de démonstration');\n    }\n    \n    // Créer des rendez-vous de démonstration\n    const maintenant = new Date();\n    const rendezVousDemo = [\n      {\n        _id: new mongoose.Types.ObjectId(),\n        numeroDossier: generateDossierNumber(),\n        patientId: patient._id,\n        patientNom: `${patient.prenom} ${patient.nom}`,\n        patientTelephone: patient.telephone,\n        medecinId: medecin._id,\n        medecinNom: `${medecin.prenom} ${medecin.nom}`,\n        dateDebut: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000), // Demain\n        dateFin: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000 + 30 * 60 * 1000), // 30 minutes plus tard\n        type: 'consultation',\n        motif: 'Consultation de routine',\n        statut: 'confirme',\n        duree: 30,\n        notes: 'Première consultation',\n        createdAt: maintenant,\n        updatedAt: maintenant,\n      },\n      {\n        _id: new mongoose.Types.ObjectId(),\n        numeroDossier: generateDossierNumber(),\n        patientId: patient._id,\n        patientNom: `${patient.prenom} ${patient.nom}`,\n        patientTelephone: patient.telephone,\n        medecinId: medecin._id,\n        medecinNom: `${medecin.prenom} ${medecin.nom}`,\n        dateDebut: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000), // Dans une semaine\n        dateFin: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000 + 30 * 60 * 1000), // 30 minutes plus tard\n        type: 'controle',\n        motif: 'Contrôle après traitement',\n        statut: 'en_attente',\n        duree: 30,\n        notes: 'Vérifier l\\'efficacité du traitement',\n        createdAt: maintenant,\n        updatedAt: maintenant,\n      },\n    ];\n    \n    const rendezVousCrees = await RendezVous.insertMany(rendezVousDemo);\n    logger.info(`${rendezVousCrees.length} rendez-vous créés avec succès`);\n    \n    logger.info('Base de données initialisée avec succès !');\n    \n    // Afficher les identifiants de connexion\n    console.log('\\n=== IDENTIFIANTS DE DÉMONSTRATION ===');\n    console.log('Admin:');\n    console.log(`Email: admin@example.com`);\n    console.log(`Mot de passe: Admin123!\\n`);\n    \n    console.log('Médecin:');\n    console.log(`Email: jean.dupont@example.com`);\n    console.log(`Mot de passe: Medecin123!\\n`);\n    \n    console.log('Secrétaire:');\n    console.log(`Email: sophie.martin@example.com`);\n    console.log(`Mot de passe: Secretaire123!\\n`);\n    \n    console.log('Patient:');\n    console.log(`Email: marie.durand@example.com`);\n    console.log(`Mot de passe: Patient123!\\n`);\n    \n    // Arrêter le processus\n    process.exit(0);\n  } catch (error) {\n    logger.error('Erreur lors de l\\'initialisation de la base de données:', error);\n    process.exit(1);\n  }\n};\n\n// Exécuter le script si appelé directement\nif (require.main === module) {\n  seedDatabase();\n}\n\nmodule.exports = seedDatabase;\n"],"mappings":"aAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM,EAAEE,EAAE,EAAEC,MAAM,CAAC,CAAC,GAAGH,OAAO,CAAC,MAAM,CAAC;AACtC,MAAMI,MAAM,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM,EAAEK,qBAAqB,CAAC,CAAC,GAAGL,OAAO,CAAC,UAAU,CAAC;;AAErD;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,uBAAuB,CAAC;AACpD,MAAMO,UAAU,GAAGP,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAM,EAAEQ,SAAS,CAAC,CAAC,GAAGR,OAAO,CAAC,YAAY,CAAC;;AAE3C;AACA,MAAMS,gBAAgB,GAAG;AACvB;EACEC,GAAG,EAAE,IAAIX,QAAQ,CAACY,KAAK,CAACC,QAAQ,CAAC,CAAC;EAClCC,GAAG,EAAE,OAAO;EACZC,MAAM,EAAE,SAAS;EACjBC,KAAK,EAAE,mBAAmB;EAC1BC,UAAU,EAAE,WAAW;EACvBC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EACrCC,OAAO,EAAE;IACPC,GAAG,EAAE,kBAAkB;IACvBC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE;EACR,CAAC;EACDC,YAAY,EAAE;AAChB,CAAC;AACD;EACEhB,GAAG,EAAE,IAAIX,QAAQ,CAACY,KAAK,CAACC,QAAQ,CAAC,CAAC;EAClCC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,yBAAyB;EAChCC,UAAU,EAAE,aAAa;EACzBC,IAAI,EAAE,SAAS;EACfU,UAAU,EAAE,mBAAmB;EAC/BT,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EACrCC,OAAO,EAAE;IACPC,GAAG,EAAE,8BAA8B;IACnCC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE;EACR,CAAC;EACDC,YAAY,EAAE;AAChB,CAAC;AACD;EACEhB,GAAG,EAAE,IAAIX,QAAQ,CAACY,KAAK,CAACC,QAAQ,CAAC,CAAC;EAClCC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,2BAA2B;EAClCC,UAAU,EAAE,gBAAgB;EAC5BC,IAAI,EAAE,YAAY;EAClBC,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EACrCC,OAAO,EAAE;IACPC,GAAG,EAAE,kBAAkB;IACvBC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE;EACR,CAAC;EACDC,YAAY,EAAE;AAChB,CAAC;AACD;EACEhB,GAAG,EAAE,IAAIX,QAAQ,CAACY,KAAK,CAACC,QAAQ,CAAC,CAAC;EAClCC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,OAAO;EACfC,KAAK,EAAE,0BAA0B;EACjCC,UAAU,EAAE,aAAa;EACzBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EACrCC,OAAO,EAAE;IACPC,GAAG,EAAE,yBAAyB;IAC9BC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE,MAAM;IACbC,IAAI,EAAE;EACR,CAAC;EACDG,qBAAqB,EAAE,iBAAiB;EACxCF,YAAY,EAAE;AAChB,CAAC,CACF;;;AAED;AACA;AACA;AACA,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAI;IACF;IACA,MAAMrB,SAAS,CAAC,CAAC;;IAEjBJ,MAAM,CAAC0B,IAAI,CAAC,qDAAqD,CAAC;;IAElE;IACA,MAAMC,OAAO,CAACC,GAAG,CAAC;IAChB1B,WAAW,CAAC2B,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1B1B,UAAU,CAAC0B,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;;IAEF7B,MAAM,CAAC0B,IAAI,CAAC,0CAA0C,CAAC;;IAEvD;IACA,MAAMI,wBAAwB,GAAG,MAAMH,OAAO,CAACC,GAAG;MAChDvB,gBAAgB,CAAC0B,GAAG,CAAC,OAAOC,WAAW,KAAK;QAC1C,MAAMC,IAAI,GAAG,MAAMpC,MAAM,CAACqC,OAAO,CAAC,EAAE,CAAC;QACrC,MAAMC,eAAe,GAAG,MAAMtC,MAAM,CAACuC,IAAI,CAACJ,WAAW,CAACpB,UAAU,EAAEqB,IAAI,CAAC;QACvE,OAAO;UACL,GAAGD,WAAW;UACdpB,UAAU,EAAEuB;QACd,CAAC;MACH,CAAC;IACH,CAAC;;IAED;IACA,MAAME,iBAAiB,GAAG,MAAMnC,WAAW,CAACoC,UAAU,CAACR,wBAAwB,CAAC;IAChF9B,MAAM,CAAC0B,IAAI,CAAC,GAAGW,iBAAiB,CAACE,MAAM,iCAAiC,CAAC;;IAEzE;IACA,MAAMC,OAAO,GAAGH,iBAAiB,CAACI,IAAI,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAAC7B,IAAI,KAAK,SAAS,CAAC;IACjE,MAAM8B,OAAO,GAAGN,iBAAiB,CAACI,IAAI,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAAC7B,IAAI,KAAK,SAAS,CAAC;;IAEjE,IAAI,CAAC2B,OAAO,IAAI,CAACG,OAAO,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC;IACpF;;IAEA;IACA,MAAMC,UAAU,GAAG,IAAI7B,IAAI,CAAC,CAAC;IAC7B,MAAM8B,cAAc,GAAG;IACrB;MACExC,GAAG,EAAE,IAAIX,QAAQ,CAACY,KAAK,CAACC,QAAQ,CAAC,CAAC;MAClCuC,aAAa,EAAE9C,qBAAqB,CAAC,CAAC;MACtC+C,SAAS,EAAEL,OAAO,CAACrC,GAAG;MACtB2C,UAAU,EAAE,GAAGN,OAAO,CAACjC,MAAM,IAAIiC,OAAO,CAAClC,GAAG,EAAE;MAC9CyC,gBAAgB,EAAEP,OAAO,CAAC7B,SAAS;MACnCqC,SAAS,EAAEX,OAAO,CAAClC,GAAG;MACtB8C,UAAU,EAAE,GAAGZ,OAAO,CAAC9B,MAAM,IAAI8B,OAAO,CAAC/B,GAAG,EAAE;MAC9C4C,SAAS,EAAE,IAAIrC,IAAI,CAACsC,GAAG,CAACC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE;MAC9DC,OAAO,EAAE,IAAIxC,IAAI,CAACsC,GAAG,CAACC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE;MAC7EE,IAAI,EAAE,cAAc;MACpBC,KAAK,EAAE,yBAAyB;MAChCC,MAAM,EAAE,UAAU;MAClBC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,uBAAuB;MAC9BC,SAAS,EAAEjB,UAAU;MACrBkB,SAAS,EAAElB;IACb,CAAC;IACD;MACEvC,GAAG,EAAE,IAAIX,QAAQ,CAACY,KAAK,CAACC,QAAQ,CAAC,CAAC;MAClCuC,aAAa,EAAE9C,qBAAqB,CAAC,CAAC;MACtC+C,SAAS,EAAEL,OAAO,CAACrC,GAAG;MACtB2C,UAAU,EAAE,GAAGN,OAAO,CAACjC,MAAM,IAAIiC,OAAO,CAAClC,GAAG,EAAE;MAC9CyC,gBAAgB,EAAEP,OAAO,CAAC7B,SAAS;MACnCqC,SAAS,EAAEX,OAAO,CAAClC,GAAG;MACtB8C,UAAU,EAAE,GAAGZ,OAAO,CAAC9B,MAAM,IAAI8B,OAAO,CAAC/B,GAAG,EAAE;MAC9C4C,SAAS,EAAE,IAAIrC,IAAI,CAACsC,GAAG,CAACC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE;MAC9DC,OAAO,EAAE,IAAIxC,IAAI,CAACsC,GAAG,CAACC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE;MAC7EE,IAAI,EAAE,UAAU;MAChBC,KAAK,EAAE,2BAA2B;MAClCC,MAAM,EAAE,YAAY;MACpBC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,sCAAsC;MAC7CC,SAAS,EAAEjB,UAAU;MACrBkB,SAAS,EAAElB;IACb,CAAC,CACF;;;IAED,MAAMmB,eAAe,GAAG,MAAM7D,UAAU,CAACmC,UAAU,CAACQ,cAAc,CAAC;IACnE9C,MAAM,CAAC0B,IAAI,CAAC,GAAGsC,eAAe,CAACzB,MAAM,gCAAgC,CAAC;;IAEtEvC,MAAM,CAAC0B,IAAI,CAAC,2CAA2C,CAAC;;IAExD;IACAuC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrBD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvCD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;IAExCD,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvBD,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7CD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;IAE1CD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BD,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/CD,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;IAE7CD,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvBD,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9CD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;IAE1C;IACAC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdrE,MAAM,CAACqE,KAAK,CAAC,yDAAyD,EAAEA,KAAK,CAAC;IAC9EF,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;EACjB;AACF,CAAC;;AAED;AACA,IAAIxE,OAAO,CAAC0E,IAAI,KAAKC,MAAM,EAAE;EAC3B9C,YAAY,CAAC,CAAC;AAChB;;AAEA8C,MAAM,CAACC,OAAO,GAAG/C,YAAY","ignoreList":[]}