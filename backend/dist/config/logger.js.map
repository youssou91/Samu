{"version":3,"file":"logger.js","names":["winston","require","path","fs","logDir","join","__dirname","existsSync","mkdirSync","recursive","consoleFormat","format","combine","timestamp","colorize","printf","level","message","meta","log","Object","keys","length","JSON","stringify","fileFormat","errors","stack","splat","json","transportsList","transports","DailyRotateFile","filename","datePattern","zippedArchive","maxSize","maxFiles","process","env","NODE_ENV","push","Console","logger","createLogger","LOG_LEVEL","defaultMeta","service","exitOnError","on","reason","error","exit","stream","write","info","trim","module","exports"],"sources":["../../src/config/logger.js"],"sourcesContent":["const winston = require('winston');\nrequire('winston-daily-rotate-file');\nconst path = require('path');\nconst fs = require('fs');\n\n// Créer le répertoire de logs s'il n'existe pas\nconst logDir = path.join(__dirname, '../../logs');\nif (!fs.existsSync(logDir)) {\n  fs.mkdirSync(logDir, { recursive: true });\n}\n\n// Format personnalisé pour la console\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({\n    format: 'YYYY-MM-DD HH:mm:ss',\n  }),\n  winston.format.colorize(),\n  winston.format.printf(({ level, message, timestamp, ...meta }) => {\n    let log = `${timestamp} [${level}]: ${message}`;\n    \n    if (meta && Object.keys(meta).length > 0) {\n      log += `\\n${JSON.stringify(meta, null, 2)}`;\n    }\n    \n    return log;\n  })\n);\n\n// Format pour les fichiers de log\nconst fileFormat = winston.format.combine(\n  winston.format.timestamp({\n    format: 'YYYY-MM-DD HH:mm:ss',\n  }),\n  winston.format.errors({ stack: true }),\n  winston.format.splat(),\n  winston.format.json()\n);\n\n// Configuration des transports\nconst transportsList = [\n  // Fichier de log des erreurs\n  new winston.transports.DailyRotateFile({\n    level: 'error',\n    filename: path.join(logDir, 'error-%DATE%.log'),\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '30d',\n    format: fileFormat,\n  }),\n  \n  // Fichier de log combiné\n  new winston.transports.DailyRotateFile({\n    filename: path.join(logDir, 'combined-%DATE%.log'),\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '30d',\n    format: fileFormat,\n  }),\n];\n\n// En mode développement, on ajoute aussi la sortie console avec des couleurs\nif (process.env.NODE_ENV !== 'production') {\n  transportsList.push(\n    new winston.transports.Console({\n      format: consoleFormat,\n    })\n  );\n}\n\n// Création du logger\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: fileFormat,\n  defaultMeta: { service: 'presence-management-api' },\n  transports: transportsList,\n  exitOnError: false, // Ne pas sortir en cas d'erreur de log\n});\n\n// Gestion des exceptions non gérées\nif (process.env.NODE_ENV === 'production') {\n  process.on('unhandledRejection', (reason) => {\n    logger.error('Unhandled Rejection:', reason);\n  });\n\n  process.on('uncaughtException', (error) => {\n    logger.error('Uncaught Exception:', error);\n    process.exit(1);\n  });\n}\n\n// Stream pour les logs de morgan\nlogger.stream = {\n  write: (message) => {\n    logger.info(message.trim());\n  },\n};\n\nmodule.exports = logger;\n"],"mappings":"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","ignoreList":[]}