{"version":3,"file":"validate.js","names":["validationResult","require","ValidationError","validate","req","res","next","errors","isEmpty","formattedErrors","array","map","err","field","param","message","msg","value","location","validateParamId","paramName","entityName","id","params","test","validateBody","schema","error","body","abortEarly","allowUnknown","stripUnknown","details","detail","path","join","type","context","validateQuery","query","module","exports"],"sources":["../../src/middleware/validate.js"],"sourcesContent":["const { validationResult } = require('express-validator');\nconst { ValidationError } = require('../utils/errors');\n\n/**\n * Middleware pour valider les résultats de la validation\n * @param {Object} req - La requête Express\n * @param {Object} res - La réponse Express\n * @param {Function} next - La fonction next\n */\nconst validate = (req, res, next) => {\n  const errors = validationResult(req);\n  \n  if (errors.isEmpty()) {\n    return next();\n  }\n  \n  // Formater les erreurs pour une meilleure lisibilité\n  const formattedErrors = errors.array().map(err => ({\n    field: err.param,\n    message: err.msg,\n    value: err.value,\n    location: err.location,\n  }));\n  \n  next(new ValidationError(formattedErrors));\n};\n\n/**\n * Middleware pour valider les paramètres d'URL (comme les IDs)\n * @param {string} paramName - Le nom du paramètre à valider\n * @param {string} entityName - Le nom de l'entité pour le message d'erreur\n */\nconst validateParamId = (paramName, entityName = 'Ressource') => (req, res, next) => {\n  const id = req.params[paramName];\n  \n  if (!id) {\n    return next(new ValidationError([{\n      field: paramName,\n      message: `L'ID est requis`,\n    }]));\n  }\n  \n  // Vérifier si l'ID est un ObjectId valide\n  if (!/^[0-9a-fA-F]{24}$/.test(id)) {\n    return next(new ValidationError([{\n      field: paramName,\n      message: `ID ${entityName} invalide`,\n      value: id,\n    }]));\n  }\n  \n  next();\n};\n\n/**\n * Middleware pour valider le corps de la requête par rapport à un schéma\n * @param {Object} schema - Le schéma Joi à valider\n */\nconst validateBody = (schema) => (req, res, next) => {\n  const { error, value } = schema.validate(req.body, { \n    abortEarly: false,\n    allowUnknown: true,\n    stripUnknown: true,\n  });\n  \n  if (error) {\n    const formattedErrors = error.details.map(detail => ({\n      field: detail.path.join('.'),\n      message: detail.message,\n      type: detail.type,\n      context: detail.context,\n    }));\n    \n    return next(new ValidationError(formattedErrors));\n  }\n  \n  // Remplacer le corps de la requête par les données validées\n  req.body = value;\n  next();\n};\n\n/**\n * Middleware pour valider les paramètres de requête (query params)\n * @param {Object} schema - Le schéma Joi à valider\n */\nconst validateQuery = (schema) => (req, res, next) => {\n  const { error, value } = schema.validate(req.query, { \n    abortEarly: false,\n    allowUnknown: true,\n    stripUnknown: true,\n  });\n  \n  if (error) {\n    const formattedErrors = error.details.map(detail => ({\n      field: detail.path.join('.'),\n      message: detail.message,\n      type: detail.type,\n      context: detail.context,\n    }));\n    \n    return next(new ValidationError(formattedErrors));\n  }\n  \n  // Remplacer les paramètres de requête par les données validées\n  req.query = value;\n  next();\n};\n\nmodule.exports = {\n  validate,\n  validateParamId,\n  validateBody,\n  validateQuery,\n};\n"],"mappings":"aAAA,MAAM,EAAEA,gBAAgB,CAAC,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACzD,MAAM,EAAEC,eAAe,CAAC,CAAC,GAAGD,OAAO,CAAC,iBAAiB,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACnC,MAAMC,MAAM,GAAGP,gBAAgB,CAACI,GAAG,CAAC;;EAEpC,IAAIG,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;IACpB,OAAOF,IAAI,CAAC,CAAC;EACf;;EAEA;EACA,MAAMG,eAAe,GAAGF,MAAM,CAACG,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,CAAAC,GAAG,MAAK;IACjDC,KAAK,EAAED,GAAG,CAACE,KAAK;IAChBC,OAAO,EAAEH,GAAG,CAACI,GAAG;IAChBC,KAAK,EAAEL,GAAG,CAACK,KAAK;IAChBC,QAAQ,EAAEN,GAAG,CAACM;EAChB,CAAC,CAAC,CAAC;;EAEHZ,IAAI,CAAC,IAAIJ,eAAe,CAACO,eAAe,CAAC,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMU,eAAe,GAAGA,CAACC,SAAS,EAAEC,UAAU,GAAG,WAAW,KAAK,CAACjB,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACnF,MAAMgB,EAAE,GAAGlB,GAAG,CAACmB,MAAM,CAACH,SAAS,CAAC;;EAEhC,IAAI,CAACE,EAAE,EAAE;IACP,OAAOhB,IAAI,CAAC,IAAIJ,eAAe,CAAC,CAAC;MAC/BW,KAAK,EAAEO,SAAS;MAChBL,OAAO,EAAE;IACX,CAAC,CAAC,CAAC,CAAC;EACN;;EAEA;EACA,IAAI,CAAC,mBAAmB,CAACS,IAAI,CAACF,EAAE,CAAC,EAAE;IACjC,OAAOhB,IAAI,CAAC,IAAIJ,eAAe,CAAC,CAAC;MAC/BW,KAAK,EAAEO,SAAS;MAChBL,OAAO,EAAE,MAAMM,UAAU,WAAW;MACpCJ,KAAK,EAAEK;IACT,CAAC,CAAC,CAAC,CAAC;EACN;;EAEAhB,IAAI,CAAC,CAAC;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMmB,YAAY,GAAGA,CAACC,MAAM,KAAK,CAACtB,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACnD,MAAM,EAAEqB,KAAK,EAAEV,KAAK,CAAC,CAAC,GAAGS,MAAM,CAACvB,QAAQ,CAACC,GAAG,CAACwB,IAAI,EAAE;IACjDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,IAAI;IAClBC,YAAY,EAAE;EAChB,CAAC,CAAC;;EAEF,IAAIJ,KAAK,EAAE;IACT,MAAMlB,eAAe,GAAGkB,KAAK,CAACK,OAAO,CAACrB,GAAG,CAAC,CAAAsB,MAAM,MAAK;MACnDpB,KAAK,EAAEoB,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC;MAC5BpB,OAAO,EAAEkB,MAAM,CAAClB,OAAO;MACvBqB,IAAI,EAAEH,MAAM,CAACG,IAAI;MACjBC,OAAO,EAAEJ,MAAM,CAACI;IAClB,CAAC,CAAC,CAAC;;IAEH,OAAO/B,IAAI,CAAC,IAAIJ,eAAe,CAACO,eAAe,CAAC,CAAC;EACnD;;EAEA;EACAL,GAAG,CAACwB,IAAI,GAAGX,KAAK;EAChBX,IAAI,CAAC,CAAC;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMgC,aAAa,GAAGA,CAACZ,MAAM,KAAK,CAACtB,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACpD,MAAM,EAAEqB,KAAK,EAAEV,KAAK,CAAC,CAAC,GAAGS,MAAM,CAACvB,QAAQ,CAACC,GAAG,CAACmC,KAAK,EAAE;IAClDV,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,IAAI;IAClBC,YAAY,EAAE;EAChB,CAAC,CAAC;;EAEF,IAAIJ,KAAK,EAAE;IACT,MAAMlB,eAAe,GAAGkB,KAAK,CAACK,OAAO,CAACrB,GAAG,CAAC,CAAAsB,MAAM,MAAK;MACnDpB,KAAK,EAAEoB,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC;MAC5BpB,OAAO,EAAEkB,MAAM,CAAClB,OAAO;MACvBqB,IAAI,EAAEH,MAAM,CAACG,IAAI;MACjBC,OAAO,EAAEJ,MAAM,CAACI;IAClB,CAAC,CAAC,CAAC;;IAEH,OAAO/B,IAAI,CAAC,IAAIJ,eAAe,CAACO,eAAe,CAAC,CAAC;EACnD;;EAEA;EACAL,GAAG,CAACmC,KAAK,GAAGtB,KAAK;EACjBX,IAAI,CAAC,CAAC;AACR,CAAC;;AAEDkC,MAAM,CAACC,OAAO,GAAG;EACftC,QAAQ;EACRgB,eAAe;EACfM,YAAY;EACZa;AACF,CAAC","ignoreList":[]}