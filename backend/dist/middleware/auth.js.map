{"version":3,"file":"auth.js","names":["jwt","require","promisify","UnauthorizedError","ForbiddenError","logger","Utilisateur","proteger","req","res","next","token","headers","authorization","startsWith","split","cookies","decoded","verify","process","env","JWT_SECRET","utilisateurActuel","findById","id","changedPasswordAfter","iat","utilisateur","locals","error","name","autoriser","roles","includes","role","join","verifierProprietaire","modelName","paramName","userIdField","Model","doc","findOne","_id","params","toLowerCase","verifierProprietaireOuAdmin","module","exports"],"sources":["../../src/middleware/auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\nconst { promisify } = require('util');\nconst { UnauthorizedError, ForbiddenError } = require('../utils/errors');\nconst logger = require('../config/logger');\nconst { Utilisateur } = require('../models');\n\n/**\n * Middleware pour protéger les routes nécessitant une authentification\n * Vérifie la présence et la validité du token JWT\n */\nconst proteger = async (req, res, next) => {\n  try {\n    let token;\n    \n    // 1) Vérifier si le token est présent dans les en-têtes\n    if (\n      req.headers.authorization &&\n      req.headers.authorization.startsWith('Bearer')\n    ) {\n      // Format: Bearer <token>\n      token = req.headers.authorization.split(' ')[1];\n    } else if (req.cookies && req.cookies.token) {\n      // Vérifier dans les cookies\n      token = req.cookies.token;\n    }\n\n    if (!token) {\n      return next(\n        new UnauthorizedError(\n          'Vous n\\'êtes pas connecté. Veuillez vous connecter pour accéder à cette ressource.'\n        )\n      );\n    }\n\n    // 2) Vérifier et décoder le token\n    const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET);\n\n    // 3) Vérifier si l'utilisateur existe toujours\n    const utilisateurActuel = await Utilisateur.findById(decoded.id);\n    if (!utilisateurActuel) {\n      return next(\n        new UnauthorizedError(\n          'Le compte associé à ce token n\\'existe plus.'\n        )\n      );\n    }\n\n    // 4) Vérifier si le mot de passe a été modifié après l'émission du token\n    if (utilisateurActuel.changedPasswordAfter(decoded.iat)) {\n      return next(\n        new UnauthorizedError(\n          'Le mot de passe a été modifié récemment. Veuillez vous reconnecter.'\n        )\n      );\n    }\n\n    // 5) Ajouter l'utilisateur à la requête pour les middlewares suivants\n    req.utilisateur = utilisateurActuel;\n    res.locals.utilisateur = utilisateurActuel;\n    \n    next();\n  } catch (error) {\n    logger.error('Erreur d\\'authentification:', error);\n    \n    if (error.name === 'JsonWebTokenError') {\n      return next(new UnauthorizedError('Token invalide. Veuillez vous reconnecter.'));\n    }\n    \n    if (error.name === 'TokenExpiredError') {\n      return next(new UnauthorizedError('Votre session a expiré. Veuillez vous reconnecter.'));\n    }\n    \n    next(error);\n  }\n};\n\n/**\n * Middleware pour restreindre l'accès à des rôles spécifiques\n * @param {...String} roles - Les rôles autorisés\n */\nconst autoriser = (...roles) => {\n  return (req, res, next) => {\n    // Vérifier si l'utilisateur est connecté\n    if (!req.utilisateur) {\n      return next(\n        new UnauthorizedError(\n          'Vous devez être connecté pour accéder à cette ressource.'\n        )\n      );\n    }\n\n    // Vérifier si le rôle de l'utilisateur est autorisé\n    if (!roles.includes(req.utilisateur.role)) {\n      return next(\n        new ForbiddenError(\n          `Vous n'avez pas les droits pour effectuer cette action. Rôles autorisés: ${roles.join(\n            ', '\n          )}`\n        )\n      );\n    }\n\n    next();\n  };\n};\n\n/**\n * Middleware pour vérifier la propriété d'une ressource\n * @param {String} modelName - Le nom du modèle (ex: 'RendezVous')\n * @param {String} paramName - Le nom du paramètre dans la requête (ex: 'id')\n * @param {String} userIdField - Le champ de l'ID utilisateur dans le modèle (ex: 'patientId')\n */\nconst verifierProprietaire = (modelName, paramName = 'id', userIdField = 'utilisateurId') => {\n  return async (req, res, next) => {\n    try {\n      const Model = require(`../models/${modelName}`);\n      const doc = await Model.findOne({\n        _id: req.params[paramName],\n        [userIdField]: req.utilisateur._id,\n      });\n\n      if (!doc) {\n        return next(\n          new ForbiddenError(\n            `Vous n'êtes pas autorisé à accéder à cette ressource.`\n          )\n        );\n      }\n\n      // Ajouter le document à la requête pour les middlewares suivants\n      req[modelName.toLowerCase()] = doc;\n      next();\n    } catch (error) {\n      next(error);\n    }\n  };\n};\n\n/**\n * Middleware pour vérifier si l'utilisateur est propriétaire ou admin\n * @param {String} modelName - Le nom du modèle\n * @param {String} paramName - Le nom du paramètre dans la requête\n * @param {String} userIdField - Le champ de l'ID utilisateur dans le modèle\n */\nconst verifierProprietaireOuAdmin = (modelName, paramName = 'id', userIdField = 'utilisateurId') => {\n  return async (req, res, next) => {\n    try {\n      // Les administrateurs ont accès à tout\n      if (req.utilisateur.role === 'admin') {\n        return next();\n      }\n\n      // Vérifier si l'utilisateur est propriétaire\n      const Model = require(`../models/${modelName}`);\n      const doc = await Model.findOne({\n        _id: req.params[paramName],\n        [userIdField]: req.utilisateur._id,\n      });\n\n      if (!doc) {\n        return next(\n          new ForbiddenError(\n            `Vous n'êtes pas autorisé à accéder à cette ressource.`\n          )\n        );\n      }\n\n      // Ajouter le document à la requête pour les middlewares suivants\n      req[modelName.toLowerCase()] = doc;\n      next();\n    } catch (error) {\n      next(error);\n    }\n  };\n};\n\nmodule.exports = {\n  proteger,\n  autoriser,\n  verifierProprietaire,\n  verifierProprietaireOuAdmin,\n};\n"],"mappings":"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","ignoreList":[]}