{"version":3,"file":"rendezVousRoutes.js","names":["express","require","router","Router","check","query","creerRendezVous","obtenirRendezVous","mettreAJourRendezVous","supprimerRendezVous","commencerRendezVous","terminerRendezVous","protegerRoute","autoriser","use","get","optional","isIn","withMessage","isISO8601","isMongoId","isInt","min","max","post","notEmpty","trim","isLength","isMobilePhone","toDate","custom","value","req","Date","body","dateDebut","Error","put","isBoolean","delete","module","exports"],"sources":["../../src/routes/rendezVousRoutes.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { check, query } = require('express-validator');\nconst { \n  creerRendezVous, \n  obtenirRendezVous, \n  mettreAJourRendezVous, \n  supprimerRendezVous,\n  commencerRendezVous,\n  terminerRendezVous\n} = require('../controllers/rendezVousController');\nconst { protegerRoute, autoriser } = require('../middleware/authMiddleware');\n\n// Protéger toutes les routes avec l'authentification\nrouter.use(protegerRoute);\n\n/**\n * @route   GET /api/rendez-vous\n * @desc    Récupérer tous les rendez-vous avec filtrage\n * @access  Privé (Médecin, Secrétaire, Admin)\n */\nrouter.get(\n  '/',\n  [\n    query('statut')\n      .optional()\n      .isIn(['en_attente', 'confirme', 'en_cours', 'termine', 'annule', 'rate', 'en_retard'])\n      .withMessage('Statut de rendez-vous invalide'),\n    query('date')\n      .optional()\n      .isISO8601()\n      .withMessage('Format de date invalide. Utilisez le format ISO8601 (YYYY-MM-DD)'),\n    query('medecinId')\n      .optional()\n      .isMongoId()\n      .withMessage('ID médecin invalide'),\n    query('patientId')\n      .optional()\n      .isMongoId()\n      .withMessage('ID patient invalide'),\n    query('type')\n      .optional()\n      .isIn(['consultation', 'controle', 'urgence', 'autre'])\n      .withMessage('Type de consultation invalide'),\n    query('page')\n      .optional()\n      .isInt({ min: 1 })\n      .withMessage('Le numéro de page doit être un entier positif'),\n    query('limit')\n      .optional()\n      .isInt({ min: 1, max: 100 })\n      .withMessage('La limite doit être un entier entre 1 et 100')\n  ],\n  obtenirRendezVous\n);\n\n/**\n * @route   POST /api/rendez-vous\n * @desc    Créer un nouveau rendez-vous\n * @access  Privé (Médecin, Secrétaire, Admin)\n */\nrouter.post(\n  '/',\n  [\n    check('patientId', 'ID du patient requis')\n      .notEmpty()\n      .isMongoId()\n      .withMessage('ID patient invalide'),\n    check('patientNom', 'Nom du patient requis')\n      .notEmpty()\n      .trim()\n      .isLength({ min: 2, max: 100 })\n      .withMessage('Le nom du patient doit contenir entre 2 et 100 caractères'),\n    check('patientTelephone', 'Téléphone du patient requis')\n      .notEmpty()\n      .trim()\n      .isMobilePhone('fr-FR')\n      .withMessage('Numéro de téléphone invalide'),\n    check('medecinId', 'ID du médecin requis')\n      .notEmpty()\n      .isMongoId()\n      .withMessage('ID médecin invalide'),\n    check('medecinNom', 'Nom du médecin requis')\n      .notEmpty()\n      .trim()\n      .isLength({ min: 2, max: 100 })\n      .withMessage('Le nom du médecin doit contenir entre 2 et 100 caractères'),\n    check('dateDebut', 'Date de début requise')\n      .notEmpty()\n      .isISO8601()\n      .withMessage('Format de date de début invalide. Utilisez le format ISO8601 (ex: 2023-01-01T09:00:00.000Z)')\n      .toDate(),\n    check('dateFin', 'Date de fin requise')\n      .notEmpty()\n      .isISO8601()\n      .withMessage('Format de date de fin invalide. Utilisez le format ISO8601 (ex: 2023-01-01T09:30:00.000Z)')\n      .toDate()\n      .custom((value, { req }) => {\n        if (new Date(value) <= new Date(req.body.dateDebut)) {\n          throw new Error('La date de fin doit être postérieure à la date de début');\n        }\n        return true;\n      }),\n    check('type', 'Type de consultation requis')\n      .notEmpty()\n      .isIn(['consultation', 'controle', 'urgence', 'autre'])\n      .withMessage('Type de consultation invalide'),\n    check('motif', 'Motif de la consultation')\n      .optional()\n      .trim()\n      .isLength({ max: 1000 })\n      .withMessage('Le motif ne doit pas dépasser 1000 caractères'),\n    check('notes', 'Notes supplémentaires')\n      .optional()\n      .trim()\n      .isLength({ max: 2000 })\n      .withMessage('Les notes ne doivent pas dépasser 2000 caractères')\n  ],\n  autoriser('medecin', 'secretaire', 'admin'),\n  creerRendezVous\n);\n\n/**\n * @route   PUT /api/rendez-vous/:id\n * @desc    Mettre à jour un rendez-vous\n * @access  Privé (Médecin, Secrétaire, Admin)\n */\nrouter.put(\n  '/:id',\n  [\n    check('statut')\n      .optional()\n      .isIn(['en_attente', 'confirme', 'en_cours', 'termine', 'annule', 'rate', 'en_retard'])\n      .withMessage('Statut de rendez-vous invalide'),\n    check('dateDebut')\n      .optional()\n      .isISO8601()\n      .withMessage('Format de date de début invalide')\n      .toDate(),\n    check('dateFin')\n      .optional()\n      .isISO8601()\n      .withMessage('Format de date de fin invalide')\n      .toDate()\n      .custom((value, { req }) => {\n        if (req.body.dateDebut && new Date(value) <= new Date(req.body.dateDebut)) {\n          throw new Error('La date de fin doit être postérieure à la date de début');\n        }\n        return true;\n      }),\n    check('type')\n      .optional()\n      .isIn(['consultation', 'controle', 'urgence', 'autre'])\n      .withMessage('Type de consultation invalide'),\n    check('motif')\n      .optional()\n      .trim()\n      .isLength({ max: 1000 })\n      .withMessage('Le motif ne doit pas dépasser 1000 caractères'),\n    check('notes')\n      .optional()\n      .trim()\n      .isLength({ max: 2000 })\n      .withMessage('Les notes ne doivent pas dépasser 2000 caractères'),\n    check('presenceConfirmee')\n      .optional()\n      .isBoolean()\n      .withMessage('La confirmation de présence doit être un booléen'),\n    check('heureArrivee')\n      .optional()\n      .isISO8601()\n      .withMessage('Format d\\'heure d\\'arrivée invalide')\n  ],\n  autoriser('medecin', 'secretaire', 'admin'),\n  mettreAJourRendezVous\n);\n\n/**\n * @route   DELETE /api/rendez-vous/:id\n * @desc    Supprimer un rendez-vous (soft delete)\n * @access  Privé (Médecin, Secrétaire, Admin)\n */\nrouter.delete(\n  '/:id',\n  autoriser('medecin', 'secretaire', 'admin'),\n  supprimerRendezVous\n);\n\n/**\n * @route   PUT /api/rendez-vous/:id/commencer\n * @desc    Marquer un rendez-vous comme commencé\n * @access  Privé (Médecin)\n */\nrouter.put(\n  '/:id/commencer',\n  autoriser('medecin'),\n  commencerRendezVous\n);\n\n/**\n * @route   PUT /api/rendez-vous/:id/terminer\n * @desc    Marquer un rendez-vous comme terminé\n * @access  Privé (Médecin)\n */\nrouter.put(\n  '/:id/terminer',\n  autoriser('medecin'),\n  terminerRendezVous\n);\n\nmodule.exports = router;\n"],"mappings":"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","ignoreList":[]}