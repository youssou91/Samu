{"version":3,"file":"Utilisateur.js","names":["mongoose","require","bcrypt","jwt","utilisateurSchema","Schema","prenom","type","String","required","trim","maxlength","nom","email","unique","match","telephone","role","enum","default","motDePasse","minlength","select","specialite","actif","Boolean","derniereConnexion","Date","dateCreation","now","dateMiseAJour","toJSON","virtuals","toObject","pre","next","isModified","salt","genSalt","hash","methods","genererJeton","sign","id","_id","process","env","JWT_SECRET","expiresIn","JWT_EXPIRE","verifierMotDePasse","motDePasseSaisi","compare","model","deleteMany","patient","virtual","ref","localField","foreignField","justOne","index","module","exports"],"sources":["../../src/models/Utilisateur.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\nconst utilisateurSchema = new mongoose.Schema({\n  prenom: {\n    type: String,\n    required: [true, 'Veuillez ajouter un prénom'],\n    trim: true,\n    maxlength: [50, 'Le prénom ne peut pas dépasser 50 caractères']\n  },\n  nom: {\n    type: String,\n    required: [true, 'Veuillez ajouter un nom'],\n    trim: true,\n    maxlength: [50, 'Le nom ne peut pas dépasser 50 caractères']\n  },\n  email: {\n    type: String,\n    required: [true, 'Veuillez ajouter un email'],\n    unique: true,\n    match: [\n      /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Veuillez ajouter un email valide'\n    ]\n  },\n  telephone: {\n    type: String,\n    maxlength: [20, 'Le numéro de téléphone ne peut pas dépasser 20 caractères'],\n    required: [true, 'Veuillez ajouter un numéro de téléphone']\n  },\n  role: {\n    type: String,\n    enum: ['patient', 'medecin', 'infirmier', 'secretaire', 'admin'],\n    default: 'patient'\n  },\n  motDePasse: {\n    type: String,\n    required: [true, 'Veuillez ajouter un mot de passe'],\n    minlength: 6,\n    select: false // Ne pas renvoyer le mot de passe dans les requêtes\n  },\n  specialite: {\n    type: String,\n    required: [\n      function() { \n        return this.role === 'medecin' || this.role === 'infirmier'; \n      },\n      'Veuillez ajouter une spécialité pour les professionnels de santé'\n    ],\n    enum: [\n      'medecin_generaliste',\n      'cardiologue',\n      'dermatologue',\n      'pediatre',\n      'gynecologue',\n      'autre'\n    ]\n  },\n  actif: {\n    type: Boolean,\n    default: true\n  },\n  derniereConnexion: {\n    type: Date\n  },\n  dateCreation: {\n    type: Date,\n    default: Date.now\n  },\n  dateMiseAJour: {\n    type: Date\n  }\n}, {\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Crypter le mot de passe avant de sauvegarder\nutilisateurSchema.pre('save', async function(next) {\n  if (!this.isModified('motDePasse')) {\n    next();\n  }\n\n  const salt = await bcrypt.genSalt(10);\n  this.motDePasse = await bcrypt.hash(this.motDePasse, salt);\n});\n\n// Mettre à jour la date de mise à jour avant de sauvegarder\nutilisateurSchema.pre('save', function(next) {\n  this.dateMiseAJour = Date.now();\n  next();\n});\n\n// Sign JWT and return\nutilisateurSchema.methods.genererJeton = function() {\n  return jwt.sign(\n    { id: this._id, role: this.role },\n    process.env.JWT_SECRET,\n    { expiresIn: process.env.JWT_EXPIRE || '30d' }\n  );\n};\n\n// Match user entered password to hashed password in database\nutilisateurSchema.methods.verifierMotDePasse = async function(motDePasseSaisi) {\n  return await bcrypt.compare(motDePasseSaisi, this.motDePasse);\n};\n\n// Cascade delete rendez-vous when a user is deleted\nutilisateurSchema.pre('remove', async function(next) {\n  await this.model('RendezVous').deleteMany({ patient: this._id });\n  next();\n});\n\n// Reverse populate with virtuals\nutilisateurSchema.virtual('rendezVous', {\n  ref: 'RendezVous',\n  localField: '_id',\n  foreignField: 'patient',\n  justOne: false\n});\n\n// Create a compound index for faster queries\nutilisateurSchema.index({ nom: 'text', prenom: 'text', email: 'text' });\n\nmodule.exports = mongoose.model('Utilisateur', utilisateurSchema);\n"],"mappings":"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","ignoreList":[]}