{"version":3,"file":"index.js","names":["mongoose","require","v4","uuidv4","bcrypt","config","adresseSchema","Schema","rue","type","String","required","trim","complement","codePostal","ville","pays","default","_id","utilisateurSchema","nom","minlength","maxlength","prenom","email","unique","lowercase","match","motDePasse","select","telephone","dateNaissance","Date","adresse","role","enum","specialite","numeroSecuriteSociale","sparse","emailVerifie","Boolean","resetPasswordToken","resetPasswordExpire","emailVerificationToken","emailVerificationExpire","loginAttempts","Number","lockUntil","actif","timestamps","toJSON","virtuals","toObject","index","methods","verifierMotDePasse","motDePasseSaisi","compare","pre","next","isModified","salt","genSalt","security","passwordSaltRounds","hash","error","rendezVousSchema","numeroDossier","patientId","Types","ObjectId","ref","patientNom","patientTelephone","medecinId","medecinNom","dateDebut","dateFin","validate","validator","value","message","duree","min","max","motif","notes","statut","presenceConfirmee","heureArrivee","dureeReelle","factureId","estDisponible","Utilisateur","model","RendezVous","module","exports"],"sources":["../../src/models/index.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst { v4: uuidv4 } = require('uuid');\nconst bcrypt = require('bcryptjs');\nconst config = require('../config/config');\n\n// Schéma pour l'adresse\nconst adresseSchema = new mongoose.Schema({\n  rue: {\n    type: String,\n    required: [true, 'La rue est requise'],\n    trim: true,\n  },\n  complement: {\n    type: String,\n    trim: true,\n  },\n  codePostal: {\n    type: String,\n    required: [true, 'Le code postal est requis'],\n    trim: true,\n  },\n  ville: {\n    type: String,\n    required: [true, 'La ville est requise'],\n    trim: true,\n  },\n  pays: {\n    type: String,\n    default: 'France',\n    trim: true,\n  },\n}, { _id: false });\n\n// Schéma de base pour l'utilisateur\nconst utilisateurSchema = new mongoose.Schema(\n  {\n    nom: {\n      type: String,\n      required: [true, 'Le nom est requis'],\n      trim: true,\n      minlength: [2, 'Le nom doit contenir au moins 2 caractères'],\n      maxlength: [100, 'Le nom ne peut pas dépasser 100 caractères'],\n    },\n    prenom: {\n      type: String,\n      required: [true, 'Le prénom est requis'],\n      trim: true,\n      minlength: [2, 'Le prénom doit contenir au moins 2 caractères'],\n      maxlength: [100, 'Le prénom ne peut pas dépasser 100 caractères'],\n    },\n    email: {\n      type: String,\n      required: [true, 'L\\'email est requis'],\n      unique: true,\n      trim: true,\n      lowercase: true,\n      match: [/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, 'Veuillez fournir un email valide'],\n    },\n    motDePasse: {\n      type: String,\n      required: [true, 'Le mot de passe est requis'],\n      minlength: [8, 'Le mot de passe doit contenir au moins 8 caractères'],\n      select: false, // Ne pas renvoyer le mot de passe par défaut\n    },\n    telephone: {\n      type: String,\n      required: [true, 'Le numéro de téléphone est requis'],\n      trim: true,\n      match: [/^[0-9]{10}$/, 'Veuillez fournir un numéro de téléphone valide'],\n    },\n    dateNaissance: {\n      type: Date,\n      required: [true, 'La date de naissance est requise'],\n    },\n    adresse: {\n      type: adresseSchema,\n      required: [true, 'L\\'adresse est requise'],\n    },\n    role: {\n      type: String,\n      enum: ['patient', 'medecin', 'secretaire', 'admin'],\n      default: 'patient',\n    },\n    specialite: {\n      type: String,\n      required: [\n        function() {\n          return this.role === 'medecin';\n        },\n        'La spécialité est requise pour un médecin',\n      ],\n      trim: true,\n    },\n    numeroSecuriteSociale: {\n      type: String,\n      required: [\n        function() {\n          return this.role === 'patient';\n        },\n        'Le numéro de sécurité sociale est requis pour un patient',\n      ],\n      unique: true,\n      sparse: true,\n      trim: true,\n      match: [/^[12][0-9]{2}(0[1-9]|1[0-2])(2[AB]|[0-9]{2})[0-9]{3}[0-9]{3}[0-9]{2}$/, 'Numéro de sécurité sociale invalide'],\n    },\n    emailVerifie: {\n      type: Boolean,\n      default: false,\n    },\n    resetPasswordToken: String,\n    resetPasswordExpire: Date,\n    emailVerificationToken: String,\n    emailVerificationExpire: Date,\n    loginAttempts: {\n      type: Number,\n      default: 0,\n    },\n    lockUntil: Date,\n    actif: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n  }\n);\n\n// Index pour les recherches fréquentes\nutilisateurSchema.index({ email: 1 }, { unique: true });\nutilisateurSchema.index({ role: 1 });\nutilisateurSchema.index({ 'adresse.ville': 1 });\nutilisateurSchema.index({ 'adresse.codePostal': 1 });\n\n// Méthodes d'instance\nutilisateurSchema.methods.verifierMotDePasse = async function (motDePasseSaisi) {\n  return await bcrypt.compare(motDePasseSaisi, this.motDePasse);\n};\n\n// Hacher le mot de passe avant de sauvegarder\nutilisateurSchema.pre('save', async function (next) {\n  if (!this.isModified('motDePasse')) return next();\n  \n  try {\n    const salt = await bcrypt.genSalt(config.security.passwordSaltRounds);\n    this.motDePasse = await bcrypt.hash(this.motDePasse, salt);\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Schéma pour les rendez-vous\nconst rendezVousSchema = new mongoose.Schema(\n  {\n    numeroDossier: {\n      type: String,\n      required: true,\n      unique: true,\n      trim: true,\n    },\n    patientId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Utilisateur',\n      required: [true, 'L\\'ID du patient est requis'],\n    },\n    patientNom: {\n      type: String,\n      required: [true, 'Le nom du patient est requis'],\n      trim: true,\n    },\n    patientTelephone: {\n      type: String,\n      required: [true, 'Le numéro de téléphone du patient est requis'],\n      trim: true,\n    },\n    medecinId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Utilisateur',\n      required: [true, 'L\\'ID du médecin est requis'],\n    },\n    medecinNom: {\n      type: String,\n      required: [true, 'Le nom du médecin est requis'],\n      trim: true,\n    },\n    dateDebut: {\n      type: Date,\n      required: [true, 'La date de début est requise'],\n    },\n    dateFin: {\n      type: Date,\n      required: [true, 'La date de fin est requise'],\n      validate: {\n        validator: function (value) {\n          return value > this.dateDebut;\n        },\n        message: 'La date de fin doit être postérieure à la date de début',\n      },\n    },\n    duree: {\n      type: Number, // en minutes\n      required: [true, 'La durée est requise'],\n      min: [5, 'La durée minimale est de 5 minutes'],\n      max: [240, 'La durée maximale est de 4 heures'],\n    },\n    type: {\n      type: String,\n      enum: ['consultation', 'controle', 'urgence', 'autre'],\n      default: 'consultation',\n    },\n    motif: {\n      type: String,\n      required: [true, 'Le motif est requis'],\n      trim: true,\n      maxlength: [1000, 'Le motif ne peut pas dépasser 1000 caractères'],\n    },\n    notes: {\n      type: String,\n      trim: true,\n      maxlength: [2000, 'Les notes ne peuvent pas dépasser 2000 caractères'],\n    },\n    statut: {\n      type: String,\n      enum: [\n        'en_attente',\n        'confirme',\n        'en_cours',\n        'termine',\n        'annule',\n        'rate',\n        'en_retard',\n      ],\n      default: 'en_attente',\n    },\n    presenceConfirmee: {\n      type: Boolean,\n      default: false,\n    },\n    heureArrivee: {\n      type: Date,\n    },\n    dureeReelle: {\n      type: Number, // en minutes\n    },\n    factureId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Facture',\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n  }\n);\n\n// Index pour les recherches fréquentes\nrendezVousSchema.index({ patientId: 1 });\nrendezVousSchema.index({ medecinId: 1 });\nrendezVousSchema.index({ dateDebut: 1 });\nrendezVousSchema.index({ dateFin: 1 });\nrendezVousSchema.index({ statut: 1 });\n\n// Méthodes d'instance\nrendezVousSchema.methods.estDisponible = function () {\n  // TODO: Implémenter la logique de disponibilité\n  return true;\n};\n\n// Modèles\nconst Utilisateur = mongoose.model('Utilisateur', utilisateurSchema);\nconst RendezVous = mongoose.model('RendezVous', rendezVousSchema);\n\nmodule.exports = {\n  Utilisateur,\n  RendezVous,\n};\n"],"mappings":"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","ignoreList":[]}