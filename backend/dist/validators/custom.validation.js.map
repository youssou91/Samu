{"version":3,"file":"custom.validation.js","names":["Types","require","BadRequestError","objectId","value","helpers","ObjectId","isValid","email","emailRegex","test","error","toLowerCase","phoneNumber","phoneRegex","replace","birthDate","Date","today","minAgeDate","getFullYear","getMonth","getDate","password","passwordRegex","module","exports"],"sources":["../../src/validators/custom.validation.js"],"sourcesContent":["const { Types } = require('mongoose');\nconst { BadRequestError } = require('../utils/errors');\n\n/**\n * Vérifie si une valeur est un ID MongoDB valide\n * @param {string} value - La valeur à valider\n * @param {Object} helpers - Les helpers Joi\n * @returns {string} L'ID si valide\n * @throws {BadRequestError} Si l'ID n'est pas valide\n */\nconst objectId = (value, helpers) => {\n  if (!Types.ObjectId.isValid(value)) {\n    throw new BadRequestError('ID invalide');\n  }\n  return value;\n};\n\n/**\n * Vérifie si une valeur est une adresse email valide\n * @param {string} value - La valeur à valider\n * @param {Object} helpers - Les helpers Joi\n * @returns {string} L'email en minuscules si valide\n */\nconst email = (value, helpers) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(value)) {\n    return helpers.error('any.invalid');\n  }\n  return value.toLowerCase();\n};\n\n/**\n * Vérifie si une valeur est un numéro de téléphone valide (format français)\n * @param {string} value - La valeur à valider\n * @param {Object} helpers - Les helpers Joi\n * @returns {string} Le numéro de téléphone si valide\n */\nconst phoneNumber = (value, helpers) => {\n  const phoneRegex = /^(?:(?:\\+|00)33|0)\\s*[1-9](?:[\\s.-]*\\d{2}){4}$/;\n  if (!phoneRegex.test(value)) {\n    return helpers.error('any.invalid');\n  }\n  return value.replace(/[\\s.-]/g, ''); // Supprime les espaces et tirets\n};\n\n/**\n * Vérifie si une valeur est une date de naissance valide (au moins 18 ans)\n * @param {string} value - La valeur à valider\n * @param {Object} helpers - Les helpers Joi\n * @returns {Date} La date de naissance si valide\n */\nconst birthDate = (value, helpers) => {\n  const birthDate = new Date(value);\n  const today = new Date();\n  const minAgeDate = new Date(\n    today.getFullYear() - 18,\n    today.getMonth(),\n    today.getDate()\n  );\n\n  if (birthDate > minAgeDate) {\n    return helpers.error('date.min');\n  }\n  return value;\n};\n\n/**\n * Vérifie si un mot de passe est suffisamment fort\n * - Au moins 8 caractères\n * - Au moins une majuscule\n * - Au moins une minuscule\n * - Au moins un chiffre\n * - Au moins un caractère spécial\n * @param {string} value - Le mot de passe à valider\n * @param {Object} helpers - Les helpers Joi\n * @returns {string} Le mot de passe si valide\n */\nconst password = (value, helpers) => {\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  if (!passwordRegex.test(value)) {\n    return helpers.error('any.invalid');\n  }\n  return value;\n};\n\nmodule.exports = {\n  objectId,\n  email,\n  phoneNumber,\n  birthDate,\n  password,\n};\n"],"mappings":"aAAA,MAAM,EAAEA,KAAK,CAAC,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AACrC,MAAM,EAAEC,eAAe,CAAC,CAAC,GAAGD,OAAO,CAAC,iBAAiB,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EACnC,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;IAClC,MAAM,IAAIF,eAAe,CAAC,aAAa,CAAC;EAC1C;EACA,OAAOE,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,KAAK,GAAGA,CAACJ,KAAK,EAAEC,OAAO,KAAK;EAChC,MAAMI,UAAU,GAAG,4BAA4B;EAC/C,IAAI,CAACA,UAAU,CAACC,IAAI,CAACN,KAAK,CAAC,EAAE;IAC3B,OAAOC,OAAO,CAACM,KAAK,CAAC,aAAa,CAAC;EACrC;EACA,OAAOP,KAAK,CAACQ,WAAW,CAAC,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAGA,CAACT,KAAK,EAAEC,OAAO,KAAK;EACtC,MAAMS,UAAU,GAAG,gDAAgD;EACnE,IAAI,CAACA,UAAU,CAACJ,IAAI,CAACN,KAAK,CAAC,EAAE;IAC3B,OAAOC,OAAO,CAACM,KAAK,CAAC,aAAa,CAAC;EACrC;EACA,OAAOP,KAAK,CAACW,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGA,CAACZ,KAAK,EAAEC,OAAO,KAAK;EACpC,MAAMW,SAAS,GAAG,IAAIC,IAAI,CAACb,KAAK,CAAC;EACjC,MAAMc,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;EACxB,MAAME,UAAU,GAAG,IAAIF,IAAI;IACzBC,KAAK,CAACE,WAAW,CAAC,CAAC,GAAG,EAAE;IACxBF,KAAK,CAACG,QAAQ,CAAC,CAAC;IAChBH,KAAK,CAACI,OAAO,CAAC;EAChB,CAAC;;EAED,IAAIN,SAAS,GAAGG,UAAU,EAAE;IAC1B,OAAOd,OAAO,CAACM,KAAK,CAAC,UAAU,CAAC;EAClC;EACA,OAAOP,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmB,QAAQ,GAAGA,CAACnB,KAAK,EAAEC,OAAO,KAAK;EACnC,MAAMmB,aAAa,GAAG,sEAAsE;EAC5F,IAAI,CAACA,aAAa,CAACd,IAAI,CAACN,KAAK,CAAC,EAAE;IAC9B,OAAOC,OAAO,CAACM,KAAK,CAAC,aAAa,CAAC;EACrC;EACA,OAAOP,KAAK;AACd,CAAC;;AAEDqB,MAAM,CAACC,OAAO,GAAG;EACfvB,QAAQ;EACRK,KAAK;EACLK,WAAW;EACXG,SAAS;EACTO;AACF,CAAC","ignoreList":[]}