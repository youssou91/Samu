{"version":3,"file":"rapportsController.js","names":["RendezVous","require","Utilisateur","asyncHandler","validationResult","moment","logger","exports","obtenirOccupationMedecins","req","res","dateDebut","dateFin","groupBy","query","debut","Date","setMonth","getMonth","fin","groupesValides","groupByValide","includes","occupationParMedecin","aggregate","$match","$gte","$lte","statut","$in","$group","_id","medecin","date","$dateToString","format","day","week","month","year","totalDuree","$sum","$subtract","nombreRdv","$lookup","from","localField","foreignField","as","$unwind","$first","details","$push","totalRdv","$sort","resultats","map","med","id","nom","prenom","specialite","statistiques","dureeTotaleMinutes","Math","round","nombreTotalRdv","dureeMoyenneMinutes","status","json","succes","message","donnees","obtenirFrequentationPatients","setFullYear","getFullYear","frequentation","nombrePatients","$addToSet","$project","$size","obtenirStatistiquesRetardsAnnulations","medecinId","match","$or","$gt","patient","motifAnnulation","retard","mois","$month","annee","$year","typeEvenement","$cond","$eq","plageRetard","$switch","branches","case","$and","then","default","nombre","motifsAnnulation","$ne","moyenneRetardMinutes","$avg","maxRetardMinutes","$max","evenements","$ifNull","$round","totalEvenements","periode","$dateFromParts","medecins","find","role","select","sort","lean","m","toString","buildGroupByFields","dateField","groupFields","semaine","$week","type"],"sources":["../../src/controllers/rapportsController.js"],"sourcesContent":["const RendezVous = require('../models/RendezVous');\nconst Utilisateur = require('../models/Utilisateur');\nconst asyncHandler = require('express-async-handler');\nconst { validationResult } = require('express-validator');\nconst moment = require('moment');\nconst logger = require('../config/logger');\n\n/**\n * Obtenir les statistiques d'occupation des médecins\n * GET /api/rapports/occupation-medecins\n * Accès: Admin\n */\nexports.obtenirOccupationMedecins = asyncHandler(async (req, res) => {\n  const { dateDebut, dateFin, groupBy = 'day' } = req.query;\n  \n  // Valider les dates\n  const debut = dateDebut ? new Date(dateDebut) : new Date(new Date().setMonth(new Date().getMonth() - 1));\n  const fin = dateFin ? new Date(dateFin) : new Date();\n  \n  // Valider le groupBy\n  const groupesValides = ['day', 'week', 'month', 'year'];\n  const groupByValide = groupesValides.includes(groupBy) ? groupBy : 'day';\n  \n  // Agrégation pour obtenir l'occupation par médecin\n  const occupationParMedecin = await RendezVous.aggregate([\n    // Filtrer par date\n    {\n      $match: {\n        dateDebut: { $gte: debut, $lte: fin },\n        statut: { $in: ['termine', 'confirme'] }\n      }\n    },\n    // Grouper par médecin et par période\n    {\n      $group: {\n        _id: {\n          medecin: '$medecin',\n          date: {\n            $dateToString: {\n              format: {\n                day: '%Y-%m-%d',\n                week: '%Y-%U',\n                month: '%Y-%m',\n                year: '%Y'\n              }[groupByValide],\n              date: '$dateDebut'\n            }\n          }\n        },\n        totalDuree: { $sum: { $subtract: ['$dateFin', '$dateDebut'] } },\n        nombreRdv: { $sum: 1 }\n      }\n    },\n    // Joindre les informations du médecin\n    {\n      $lookup: {\n        from: 'utilisateurs',\n        localField: '_id.medecin',\n        foreignField: '_id',\n        as: 'medecinInfo'\n      }\n    },\n    { $unwind: '$medecinInfo' },\n    // Grouper pour obtenir le total par médecin\n    {\n      $group: {\n        _id: '$_id.medecin',\n        medecin: { $first: '$medecinInfo' },\n        details: {\n          $push: {\n            date: '$_id.date',\n            totalDuree: '$totalDuree',\n            nombreRdv: '$nombreRdv'\n          }\n        },\n        totalDuree: { $sum: '$totalDuree' },\n        totalRdv: { $sum: '$nombreRdv' }\n      }\n    },\n    // Trier par durée totale décroissante\n    { $sort: { totalDuree: -1 } }\n  ]);\n  \n  // Formater la réponse\n  const resultats = occupationParMedecin.map(med => ({\n    medecin: {\n      id: med.medecin._id,\n      nom: med.medecin.nom,\n      prenom: med.medecin.prenom,\n      specialite: med.medecin.specialite\n    },\n    details: med.details,\n    statistiques: {\n      dureeTotaleMinutes: Math.round(med.totalDuree / (1000 * 60)),\n      nombreTotalRdv: med.totalRdv,\n      dureeMoyenneMinutes: Math.round((med.totalDuree / (1000 * 60)) / med.totalRdv) || 0\n    }\n  }));\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Statistiques d\\'occupation des médecins récupérées avec succès',\n    donnees: {\n      dateDebut: debut,\n      dateFin: fin,\n      groupBy: groupByValide,\n      resultats\n    }\n  });\n});\n\n/**\n * Obtenir les statistiques de fréquentation des patients\n * GET /api/rapports/frequentation-patients\n * Accès: Admin\n */\nexports.obtenirFrequentationPatients = asyncHandler(async (req, res) => {\n  const { dateDebut, dateFin, groupBy = 'month' } = req.query;\n  \n  // Valider les dates\n  const debut = dateDebut ? new Date(dateDebut) : new Date(new Date().setFullYear(new Date().getFullYear() - 1));\n  const fin = dateFin ? new Date(dateFin) : new Date();\n  \n  // Valider le groupBy\n  const groupesValides = ['day', 'week', 'month', 'year'];\n  const groupByValide = groupesValides.includes(groupBy) ? groupBy : 'month';\n  \n  // Agrégation pour obtenir la fréquentation des patients\n  const frequentation = await RendezVous.aggregate([\n    // Filtrer par date et statut\n    {\n      $match: {\n        dateDebut: { $gte: debut, $lte: fin },\n        statut: { $in: ['termine', 'confirme'] }\n      }\n    },\n    // Grouper par période\n    {\n      $group: {\n        _id: {\n          date: {\n            $dateToString: {\n              format: {\n                day: '%Y-%m-%d',\n                week: '%Y-%U',\n                month: '%Y-%m',\n                year: '%Y'\n              }[groupByValide],\n              date: '$dateDebut'\n            }\n          }\n        },\n        nombrePatients: { $addToSet: '$patient' },\n        nombreRdv: { $sum: 1 }\n      }\n    },\n    // Compter le nombre de patients uniques\n    {\n      $project: {\n        date: '$_id.date',\n        nombrePatients: { $size: '$nombrePatients' },\n        nombreRdv: 1,\n        _id: 0\n      }\n    },\n    // Trier par date\n    { $sort: { date: 1 } }\n  ]);\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Statistiques de fréquentation des patients récupérées avec succès',\n    donnees: {\n      dateDebut: debut,\n      dateFin: fin,\n      groupBy: groupByValide,\n      frequentation\n    }\n  });\n});\n\n/**\n * Obtenir les statistiques de retard et d'annulation\n * GET /api/rapports/retards-annulations\n * Accès: Admin\n */\nexports.obtenirStatistiquesRetardsAnnulations = asyncHandler(async (req, res) => {\n  const { dateDebut, dateFin, medecinId } = req.query;\n  \n  // Valider les dates\n  const debut = dateDebut ? new Date(dateDebut) : new Date(new Date().setMonth(new Date().getMonth() - 6));\n  const fin = dateFin ? new Date(dateFin) : new Date();\n  \n  // Construire le filtre de base\n  const match = {\n    dateDebut: { $gte: debut, $lte: fin },\n    $or: [\n      { statut: 'annule' },\n      { 'retard.minutes': { $gt: 0 } }\n    ]\n  };\n  \n  // Ajouter le filtre par médecin si spécifié\n  if (medecinId) {\n    match.medecin = medecinId;\n  }\n  \n  // Agrégation pour obtenir les statistiques de retard et d'annulation\n  const resultats = await RendezVous.aggregate([\n    // Filtrer les rendez-vous annulés ou en retard\n    { $match: match },\n    // Projeter les champs nécessaires\n    {\n      $project: {\n        statut: 1,\n        dateDebut: 1,\n        dateFin: 1,\n        medecin: 1,\n        patient: 1,\n        motifAnnulation: 1,\n        retard: 1,\n        // Calculer le mois et l'année pour le regroupement\n        mois: { $month: '$dateDebut' },\n        annee: { $year: '$dateDebut' },\n        // Type d'événement (annulation ou retard)\n        typeEvenement: {\n          $cond: [\n            { $eq: ['$statut', 'annule'] },\n            'annulation',\n            'retard'\n          ]\n        }\n      }\n    },\n    // Grouper par type d'événement et par mois/année\n    {\n      $group: {\n        _id: {\n          typeEvenement: '$typeEvenement',\n          mois: '$mois',\n          annee: '$annee',\n          // Pour les retards, regrouper également par plage de minutes\n          plageRetard: {\n            $switch: {\n              branches: [\n                { \n                  case: { $and: [\n                    { $eq: ['$typeEvenement', 'retard'] },\n                    { $lte: ['$retard.minutes', 15] }\n                  ]},\n                  then: '0-15 min'\n                },\n                { \n                  case: { $and: [\n                    { $eq: ['$typeEvenement', 'retard'] },\n                    { $lte: ['$retard.minutes', 30] }\n                  ]},\n                  then: '16-30 min'\n                },\n                { \n                  case: { $eq: ['$typeEvenement', 'retard'] },\n                  then: '30+ min'\n                },\n                { case: { $eq: ['$typeEvenement', 'annulation'] }, then: null }\n              ],\n              default: null\n            }\n          }\n        },\n        nombre: { $sum: 1 },\n        // Pour les annulations, compter les motifs les plus courants\n        motifsAnnulation: {\n          $addToSet: {\n            $cond: [\n              { $and: [\n                { $ne: ['$motifAnnulation', ''] },\n                { $ne: ['$motifAnnulation', null] }\n              ]},\n              '$motifAnnulation',\n              '$$REMOVE'\n            ]\n          }\n        },\n        // Pour les retards, calculer la moyenne des retards\n        moyenneRetardMinutes: {\n          $avg: {\n            $cond: [\n              { $eq: ['$typeEvenement', 'retard'] },\n              '$retard.minutes',\n              '$$REMOVE'\n            ]\n          }\n        },\n        // Pour les retards, obtenir le retard maximum\n        maxRetardMinutes: {\n          $max: {\n            $cond: [\n              { $eq: ['$typeEvenement', 'retard'] },\n              '$retard.minutes',\n              '$$REMOVE'\n            ]\n          }\n        }\n      }\n    },\n    // Trier par année, mois et type d'événement\n    {\n      $sort: {\n        '_id.annee': 1,\n        '_id.mois': 1,\n        '_id.typeEvenement': 1\n      }\n    },\n    // Regrouper pour formater la réponse\n    {\n      $group: {\n        _id: {\n          mois: '$_id.mois',\n          annee: '$_id.annee'\n        },\n        evenements: {\n          $push: {\n            typeEvenement: '$_id.typeEvenement',\n            plageRetard: '$_id.plageRetard',\n            nombre: '$nombre',\n            moyenneRetardMinutes: { $ifNull: [{ $round: ['$moyenneRetardMinutes', 1] }, null] },\n            maxRetardMinutes: '$maxRetardMinutes',\n            motifsAnnulation: {\n              $cond: [\n                { $eq: ['$_id.typeEvenement', 'annulation'] },\n                '$motifsAnnulation',\n                '$$REMOVE'\n              ]\n            }\n          }\n        },\n        totalEvenements: { $sum: '$nombre' }\n      }\n    },\n    // Trier par année et mois\n    {\n      $sort: {\n        '_id.annee': 1,\n        '_id.mois': 1\n      }\n    },\n    // Formater la réponse finale\n    {\n      $project: {\n        _id: 0,\n        mois: '$_id.mois',\n        annee: '$_id.annee',\n        periode: {\n          $dateToString: {\n            format: '%Y-%m',\n            date: {\n              $dateFromParts: {\n                year: '$_id.annee',\n                month: '$_id.mois',\n                day: 1\n              }\n            }\n          }\n        },\n        evenements: 1,\n        totalEvenements: 1\n      }\n    }\n  ]);\n  \n  // Obtenir la liste des médecins pour le filtre\n  const medecins = await Utilisateur.find({ role: 'medecin', statut: 'actif' })\n    .select('prenom nom specialite')\n    .sort({ nom: 1, prenom: 1 })\n    .lean();\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Statistiques de retards et annulations récupérées avec succès',\n    donnees: {\n      dateDebut: debut,\n      dateFin: fin,\n      medecin: medecinId ? medecins.find(m => m._id.toString() === medecinId) : null,\n      medecins,\n      resultats\n    }\n  });\n});\n\n/**\n * Fonction utilitaire pour construire les champs de regroupement\n * @param {string} groupBy - Type de regroupement\n * @param {string} dateField - Champ de date à utiliser\n * @returns {Object} - Objet de regroupement pour l'agrégation\n */\nfunction buildGroupByFields(groupBy, dateField) {\n  const groupFields = {};\n  \n  switch (groupBy) {\n    case 'day':\n      groupFields.date = { $dateToString: { format: '%Y-%m-%d', date: dateField } };\n      break;\n    case 'week':\n      groupFields.semaine = { $week: dateField };\n      groupFields.annee = { $year: dateField };\n      break;\n    case 'month':\n      groupFields.mois = { $month: dateField };\n      groupFields.annee = { $year: dateField };\n      break;\n    case 'year':\n      groupFields.annee = { $year: dateField };\n      break;\n    case 'medecin':\n      groupFields.medecin = '$medecin';\n      break;\n    case 'patient':\n      groupFields.patient = '$patient';\n      break;\n    case 'type':\n      groupFields.type = '$type';\n      break;\n    default:\n      groupFields.mois = { $month: dateField };\n      groupFields.annee = { $year: dateField };\n  }\n  \n  return groupFields;\n}\n"],"mappings":"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","ignoreList":[]}