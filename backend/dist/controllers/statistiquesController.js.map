{"version":3,"file":"statistiquesController.js","names":["RendezVous","require","Utilisateur","asyncHandler","moment","exports","obtenirStatistiquesGenerales","req","res","dateDebut","dateFin","query","debut","Date","subtract","toDate","fin","filtreUtilisateur","user","role","medecin","id","patient","totalRendezVous","rendezVousConfirme","rendezVousTermine","rendezVousAnnule","moyenneDuree","tauxPonctualite","repartitionParJour","repartitionParType","repartitionParStatut","medecinsActifs","patientsFrequents","Promise","all","countDocuments","$gte","$lte","statut","aggregate","$match","dureeReelleMinutes","$gt","$group","_id","moyenne","$avg","total","$sum","$in","heureDebut","$exists","$project","estPonctuel","$subtract","ponctuels","$cond","$dayOfWeek","count","$sort","type","$ne","$lookup","from","localField","foreignField","as","$unwind","nom","$first","$concat","specialite","$limit","telephone","dernierRendezVous","$max","resultatMoyenneDuree","resultatTauxPonctualite","statistiques","periode","dureeJours","diff","resume","moyenneDureeMinutes","Math","round","map","item","jour","nomJour","day","format","dernierRendezVousFormat","metriquesAvancees","status","json","succes","message","donnees","obtenirStatistiquesMedecin","medecinId","params","erreurs","champ","findOne","actif","select","disponibiliteMoyenne","totalDureePlanifiee","$divide","totalDureeReelle","resultatDisponibilite","tauxDisponibilite","nomComplet","prenom"],"sources":["../../src/controllers/statistiquesController.js"],"sourcesContent":["const RendezVous = require('../models/RendezVous');\nconst Utilisateur = require('../models/Utilisateur');\nconst asyncHandler = require('express-async-handler');\nconst moment = require('moment');\n\n// Obtenir les statistiques générales\nexports.obtenirStatistiquesGenerales = asyncHandler(async (req, res) => {\n  const { dateDebut, dateFin } = req.query;\n  \n  // Définir la plage de dates (par défaut: 30 derniers jours)\n  const debut = dateDebut \n    ? new Date(dateDebut) \n    : moment().subtract(30, 'days').toDate();\n    \n  const fin = dateFin \n    ? new Date(dateFin) \n    : new Date();\n  \n  // Filtrer par utilisateur si nécessaire\n  const filtreUtilisateur = {};\n  \n  if (req.user.role === 'medecin') {\n    filtreUtilisateur.medecin = req.user.id;\n  } else if (req.user.role === 'patient') {\n    filtreUtilisateur.patient = req.user.id;\n  }\n  \n  // Requêtes en parallèle pour optimiser les performances\n  const [\n    totalRendezVous,\n    rendezVousConfirme,\n    rendezVousTermine,\n    rendezVousAnnule,\n    moyenneDuree,\n    tauxPonctualite,\n    repartitionParJour,\n    repartitionParType,\n    repartitionParStatut,\n    medecinsActifs,\n    patientsFrequents\n  ] = await Promise.all([\n    // Nombre total de rendez-vous\n    RendezVous.countDocuments({\n      ...filtreUtilisateur,\n      dateDebut: { $gte: debut, $lte: fin }\n    }),\n    \n    // Nombre de rendez-vous confirmés\n    RendezVous.countDocuments({\n      ...filtreUtilisateur,\n      statut: 'confirme',\n      dateDebut: { $gte: debut, $lte: fin }\n    }),\n    \n    // Nombre de rendez-vous terminés\n    RendezVous.countDocuments({\n      ...filtreUtilisateur,\n      statut: 'termine',\n      dateDebut: { $gte: debut, $lte: fin }\n    }),\n    \n    // Nombre de rendez-vous annulés\n    RendezVous.countDocuments({\n      ...filtreUtilisateur,\n      statut: 'annule',\n      dateDebut: { $gte: debut, $lte: fin }\n    }),\n    \n    // Durée moyenne des rendez-vous terminés\n    RendezVous.aggregate([\n      {\n        $match: {\n          ...filtreUtilisateur,\n          statut: 'termine',\n          dateDebut: { $gte: debut, $lte: fin },\n          dureeReelleMinutes: { $gt: 0 }\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          moyenne: { $avg: '$dureeReelleMinutes' },\n          total: { $sum: 1 }\n        }\n      }\n    ]),\n    \n    // Taux de ponctualité (rendez-vous commencés à l'heure ou en avance)\n    RendezVous.aggregate([\n      {\n        $match: {\n          ...filtreUtilisateur,\n          statut: { $in: ['termine', 'en_cours'] },\n          dateDebut: { $gte: debut, $lte: fin },\n          heureDebut: { $exists: true }\n        }\n      },\n      {\n        $project: {\n          estPonctuel: {\n            $lte: [\n              { $subtract: ['$heureDebut', '$dateDebut'] },\n              5 * 60 * 1000 // 5 minutes de tolérance\n            ]\n          }\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          total: { $sum: 1 },\n          ponctuels: {\n            $sum: { $cond: ['$estPonctuel', 1, 0] }\n          }\n        }\n      }\n    ]),\n    \n    // Répartition des rendez-vous par jour de la semaine\n    RendezVous.aggregate([\n      {\n        $match: {\n          ...filtreUtilisateur,\n          dateDebut: { $gte: debut, $lte: fin }\n        }\n      },\n      {\n        $group: {\n          _id: { $dayOfWeek: '$dateDebut' },\n          count: { $sum: 1 }\n        }\n      },\n      { $sort: { _id: 1 } }\n    ]),\n    \n    // Répartition des rendez-vous par type\n    RendezVous.aggregate([\n      {\n        $match: {\n          ...filtreUtilisateur,\n          dateDebut: { $gte: debut, $lte: fin },\n          type: { $exists: true, $ne: null }\n        }\n      },\n      {\n        $group: {\n          _id: '$type',\n          count: { $sum: 1 }\n        }\n      },\n      { $sort: { count: -1 } }\n    ]),\n    \n    // Répartition des rendez-vous par statut\n    RendezVous.aggregate([\n      {\n        $match: {\n          ...filtreUtilisateur,\n          dateDebut: { $gte: debut, $lte: fin }\n        }\n      },\n      {\n        $group: {\n          _id: '$statut',\n          count: { $sum: 1 }\n        }\n      },\n      { $sort: { count: -1 } }\n    ]),\n    \n    // Médecins les plus actifs (nombre de rendez-vous)\n    RendezVous.aggregate([\n      {\n        $match: {\n          ...filtreUtilisateur,\n          dateDebut: { $gte: debut, $lte: fin }\n        }\n      },\n      {\n        $lookup: {\n          from: 'utilisateurs',\n          localField: 'medecin',\n          foreignField: '_id',\n          as: 'medecinInfo'\n        }\n      },\n      { $unwind: '$medecinInfo' },\n      {\n        $group: {\n          _id: '$medecin',\n          nom: { $first: { $concat: ['$medecinInfo.prenom', ' ', '$medecinInfo.nom'] } },\n          specialite: { $first: '$medecinInfo.specialite' },\n          count: { $sum: 1 }\n        }\n      },\n      { $sort: { count: -1 } },\n      { $limit: 5 }\n    ]),\n    \n    // Patients les plus fréquents\n    RendezVous.aggregate([\n      {\n        $match: {\n          ...filtreUtilisateur,\n          dateDebut: { $gte: debut, $lte: fin }\n        }\n      },\n      {\n        $lookup: {\n          from: 'utilisateurs',\n          localField: 'patient',\n          foreignField: '_id',\n          as: 'patientInfo'\n        }\n      },\n      { $unwind: '$patientInfo' },\n      {\n        $group: {\n          _id: '$patient',\n          nom: { $first: { $concat: ['$patientInfo.prenom', ' ', '$patientInfo.nom'] } },\n          telephone: { $first: '$patientInfo.telephone' },\n          count: { $sum: 1 },\n          dernierRendezVous: { $max: '$dateDebut' }\n        }\n      },\n      { $sort: { count: -1 } },\n      { $limit: 10 }\n    ])\n  ]);\n  \n  // Traiter les résultats des agrégations\n  const resultatMoyenneDuree = moyenneDuree[0] || { moyenne: 0, total: 0 };\n  const resultatTauxPonctualite = tauxPonctualite[0] || { total: 0, ponctuels: 0 };\n  \n  // Formater la réponse\n  const statistiques = {\n    periode: {\n      debut: debut,\n      fin: fin,\n      dureeJours: moment(fin).diff(moment(debut), 'days') + 1\n    },\n    resume: {\n      totalRendezVous,\n      rendezVousConfirme,\n      rendezVousTermine,\n      rendezVousAnnule,\n      moyenneDureeMinutes: Math.round(resultatMoyenneDuree.moyenne || 0),\n      tauxPonctualite: resultatTauxPonctualite.total > 0 \n        ? Math.round((resultatTauxPonctualite.ponctuels / resultatTauxPonctualite.total) * 100) \n        : 0\n    },\n    repartitionParJour: repartitionParJour.map(item => ({\n      jour: item._id,\n      nomJour: moment().day(item._id - 1).format('dddd'),\n      count: item.count\n    })),\n    repartitionParType: repartitionParType,\n    repartitionParStatut: repartitionParStatut,\n    medecinsActifs: medecinsActifs,\n    patientsFrequents: patientsFrequents.map(patient => ({\n      ...patient,\n      dernierRendezVous: patient.dernierRendezVous,\n      dernierRendezVousFormat: moment(patient.dernierRendezVous).format('DD/MM/YYYY HH:mm')\n    })),\n    metriquesAvancees: {\n      // À implémenter selon les besoins spécifiques\n    }\n  };\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Statistiques récupérées avec succès',\n    donnees: statistiques\n  });\n});\n\n// Obtenir les statistiques d'un médecin spécifique\nexports.obtenirStatistiquesMedecin = asyncHandler(async (req, res) => {\n  const { medecinId } = req.params;\n  const { dateDebut, dateFin } = req.query;\n  \n  // Vérifier que l'utilisateur a le droit d'accéder à ces statistiques\n  if (req.user.role === 'patient' || \n      (req.user.role === 'medecin' && req.user.id !== medecinId)) {\n    return res.status(403).json({\n      succes: false,\n      message: 'Accès non autorisé à ces statistiques',\n      erreurs: [\n        { champ: 'autorisation', message: 'Vous n\\'êtes pas autorisé à accéder à ces données' }\n      ]\n    });\n  }\n  \n  // Vérifier que le médecin existe\n  const medecin = await Utilisateur.findOne({\n    _id: medecinId,\n    role: 'medecin',\n    actif: true\n  }).select('prenom nom specialite');\n  \n  if (!medecin) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'medecinId', message: 'Médecin non trouvé ou inactif' }\n      ]\n    });\n  }\n  \n  // Définir la plage de dates (par défaut: 30 derniers jours)\n  const debut = dateDebut \n    ? new Date(dateDebut) \n    : moment().subtract(30, 'days').toDate();\n    \n  const fin = dateFin \n    ? new Date(dateFin) \n    : new Date();\n  \n  // Requêtes en parallèle pour optimiser les performances\n  const [\n    totalRendezVous,\n    rendezVousTermine,\n    moyenneDuree,\n    tauxPonctualite,\n    repartitionParJour,\n    repartitionParType,\n    repartitionParStatut,\n    patientsFrequents,\n    disponibiliteMoyenne\n  ] = await Promise.all([\n    // Nombre total de rendez-vous\n    RendezVous.countDocuments({\n      medecin: medecinId,\n      dateDebut: { $gte: debut, $lte: fin }\n    }),\n    \n    // Nombre de rendez-vous terminés\n    RendezVous.countDocuments({\n      medecin: medecinId,\n      statut: 'termine',\n      dateDebut: { $gte: debut, $lte: fin }\n    }),\n    \n    // Durée moyenne des rendez-vous terminés\n    RendezVous.aggregate([\n      {\n        $match: {\n          medecin: medecinId,\n          statut: 'termine',\n          dateDebut: { $gte: debut, $lte: fin },\n          dureeReelleMinutes: { $gt: 0 }\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          moyenne: { $avg: '$dureeReelleMinutes' },\n          total: { $sum: 1 }\n        }\n      }\n    ]),\n    \n    // Taux de ponctualité\n    RendezVous.aggregate([\n      {\n        $match: {\n          medecin: medecinId,\n          statut: { $in: ['termine', 'en_cours'] },\n          dateDebut: { $gte: debut, $lte: fin },\n          heureDebut: { $exists: true }\n        }\n      },\n      {\n        $project: {\n          estPonctuel: {\n            $lte: [\n              { $subtract: ['$heureDebut', '$dateDebut'] },\n              5 * 60 * 1000 // 5 minutes de tolérance\n            ]\n          }\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          total: { $sum: 1 },\n          ponctuels: {\n            $sum: { $cond: ['$estPonctuel', 1, 0] }\n          }\n        }\n      }\n    ]),\n    \n    // Répartition par jour de la semaine\n    RendezVous.aggregate([\n      {\n        $match: {\n          medecin: medecinId,\n          dateDebut: { $gte: debut, $lte: fin }\n        }\n      },\n      {\n        $group: {\n          _id: { $dayOfWeek: '$dateDebut' },\n          count: { $sum: 1 }\n        }\n      },\n      { $sort: { _id: 1 } }\n    ]),\n    \n    // Répartition par type de rendez-vous\n    RendezVous.aggregate([\n      {\n        $match: {\n          medecin: medecinId,\n          dateDebut: { $gte: debut, $lte: fin },\n          type: { $exists: true, $ne: null }\n        }\n      },\n      {\n        $group: {\n          _id: '$type',\n          count: { $sum: 1 }\n        }\n      },\n      { $sort: { count: -1 } }\n    ]),\n    \n    // Répartition par statut\n    RendezVous.aggregate([\n      {\n        $match: {\n          medecin: medecinId,\n          dateDebut: { $gte: debut, $lte: fin }\n        }\n      },\n      {\n        $group: {\n          _id: '$statut',\n          count: { $sum: 1 }\n        }\n      },\n      { $sort: { count: -1 } }\n    ]),\n    \n    // Patients les plus fréquents\n    RendezVous.aggregate([\n      {\n        $match: {\n          medecin: medecinId,\n          dateDebut: { $gte: debut, $lte: fin }\n        }\n      },\n      {\n        $lookup: {\n          from: 'utilisateurs',\n          localField: 'patient',\n          foreignField: '_id',\n          as: 'patientInfo'\n        }\n      },\n      { $unwind: '$patientInfo' },\n      {\n        $group: {\n          _id: '$patient',\n          nom: { $first: { $concat: ['$patientInfo.prenom', ' ', '$patientInfo.nom'] } },\n          telephone: { $first: '$patientInfo.telephone' },\n          count: { $sum: 1 },\n          dernierRendezVous: { $max: '$dateDebut' }\n        }\n      },\n      { $sort: { count: -1 } },\n      { $limit: 10 }\n    ]),\n    \n    // Taux de disponibilité moyen\n    RendezVous.aggregate([\n      {\n        $match: {\n          medecin: medecinId,\n          dateDebut: { $gte: debut, $lte: fin },\n          statut: 'termine'\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          totalDureePlanifiee: {\n            $sum: {\n              $divide: [\n                { $subtract: ['$dateFin', '$dateDebut'] },\n                1000 * 60 // Convertir en minutes\n              ]\n            }\n          },\n          totalDureeReelle: { $sum: '$dureeReelleMinutes' },\n          count: { $sum: 1 }\n        }\n      }\n    ])\n  ]);\n  \n  // Traiter les résultats des agrégations\n  const resultatMoyenneDuree = moyenneDuree[0] || { moyenne: 0, total: 0 };\n  const resultatTauxPonctualite = tauxPonctualite[0] || { total: 0, ponctuels: 0 };\n  const resultatDisponibilite = disponibiliteMoyenne[0] || { \n    totalDureePlanifiee: 0, \n    totalDureeReelle: 0, \n    count: 0 \n  };\n  \n  // Calculer le taux de disponibilité\n  const tauxDisponibilite = resultatDisponibilite.totalDureePlanifiee > 0\n    ? (resultatDisponibilite.totalDureeReelle / resultatDisponibilite.totalDureePlanifiee) * 100\n    : 0;\n  \n  // Formater la réponse\n  const statistiques = {\n    medecin: {\n      id: medecin._id,\n      nomComplet: `${medecin.prenom} ${medecin.nom}`,\n      specialite: medecin.specialite\n    },\n    periode: {\n      debut: debut,\n      fin: fin,\n      dureeJours: moment(fin).diff(moment(debut), 'days') + 1\n    },\n    resume: {\n      totalRendezVous,\n      rendezVousTermine,\n      moyenneDureeMinutes: Math.round(resultatMoyenneDuree.moyenne || 0),\n      tauxPonctualite: resultatTauxPonctualite.total > 0 \n        ? Math.round((resultatTauxPonctualite.ponctuels / resultatTauxPonctualite.total) * 100) \n        : 0,\n      tauxDisponibilite: Math.round(tauxDisponibilite)\n    },\n    repartitionParJour: repartitionParJour.map(item => ({\n      jour: item._id,\n      nomJour: moment().day(item._id - 1).format('dddd'),\n      count: item.count\n    })),\n    repartitionParType: repartitionParType,\n    repartitionParStatut: repartitionParStatut,\n    patientsFrequents: patientsFrequents.map(patient => ({\n      ...patient,\n      dernierRendezVous: patient.dernierRendezVous,\n      dernierRendezVousFormat: moment(patient.dernierRendezVous).format('DD/MM/YYYY HH:mm')\n    }))\n  };\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Statistiques du médecin récupérées avec succès',\n    donnees: statistiques\n  });\n});\n\n// Exporter d'autres fonctions de statistiques selon les besoins\n// Par exemple : statistiques par patient, par période, etc.\n"],"mappings":"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","ignoreList":[]}