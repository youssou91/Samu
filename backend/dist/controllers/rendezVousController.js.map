{"version":3,"file":"rendezVousController.js","names":["RendezVous","require","Utilisateur","validationResult","asyncHandler","formaterRendezVous","rendezVous","_id","patient","patientNom","patientTelephone","medecin","medecinNom","dateDebut","dateFin","type","statut","motif","notes","presenceConfirmee","heureArrivee","creePar","creeBy","dateCreation","exports","creerRendezVous","req","res","errors","isEmpty","status","json","succes","message","erreurs","array","map","err","champ","param","msg","patientId","body","findById","select","findOne","medecinId","role","actif","estDisponible","verifierDisponibilite","Date","create","prenom","nom","trim","telephone","user","id","donnees","obtenirRendezVous","date","page","limit","query","$in","split","setHours","setDate","getDate","$gte","$lt","pageInt","parseInt","limitInt","skip","total","Promise","all","countDocuments","find","sort","populate","lean","resultats","pagination","totalPages","Math","ceil","suivant","precedent","count","length","mettreAJourRendezVous","params","estProprietaire","toString","includes","estAdmin","dateDebutRdv","dateFinRdv","champsMiseAJour","undefined","findByIdAndUpdate","modifiePar","dateMiseAJour","now","new","runValidators","context","supprimerRendezVous","maintenant","supprime","supprimePar","dateSuppression","save","commencerRendezVous","heureDebut","retardEnMinutes","floor","retardMinutes","rendezVousPopule","terminerRendezVous","dureeReelleMinutes","dureePrevueMinutes","depassementMinutes","heureFin","avecDepassement"],"sources":["../../src/controllers/rendezVousController.js"],"sourcesContent":["const RendezVous = require('../models/RendezVous');\nconst Utilisateur = require('../models/Utilisateur');\nconst { validationResult } = require('express-validator');\nconst asyncHandler = require('express-async-handler');\n\n// Helper pour formater la réponse d'un rendez-vous\nconst formaterRendezVous = (rendezVous) => ({\n  _id: rendezVous._id,\n  patient: rendezVous.patient,\n  patientNom: rendezVous.patientNom,\n  patientTelephone: rendezVous.patientTelephone,\n  medecin: rendezVous.medecin,\n  medecinNom: rendezVous.medecinNom,\n  dateDebut: rendezVous.dateDebut,\n  dateFin: rendezVous.dateFin,\n  type: rendezVous.type,\n  statut: rendezVous.statut,\n  motif: rendezVous.motif,\n  notes: rendezVous.notes,\n  presenceConfirmee: rendezVous.presenceConfirmee,\n  heureArrivee: rendezVous.heureArrivee,\n  creePar: rendezVous.creeBy,\n  dateCreation: rendezVous.dateCreation\n});\n\n// Créer un nouveau rendez-vous\nexports.creerRendezVous = asyncHandler(async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ \n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: errors.array().map(err => ({\n        champ: err.param,\n        message: err.msg\n      }))\n    });\n  }\n\n  const { \n    patientId, \n    patientNom, \n    patientTelephone, \n    dateDebut, \n    dateFin, \n    type, \n    motif, \n    notes \n  } = req.body;\n\n  // Vérifier que le patient existe\n  const patient = await Utilisateur.findById(patientId).select('prenom nom email telephone');\n  if (!patient) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: [\n        { champ: 'patientId', message: 'Patient non trouvé avec cet ID' }\n      ]\n    });\n  }\n\n  // Vérifier que le médecin existe\n  const medecin = await Utilisateur.findOne({ \n    _id: req.body.medecinId,\n    role: 'medecin',\n    actif: true \n  }).select('prenom nom specialite');\n\n  if (!medecin) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: [\n        { champ: 'medecinId', message: 'Médecin non trouvé ou inactif' }\n      ]\n    });\n  }\n\n  // Vérifier la disponibilité du créneau\n  const estDisponible = await RendezVous.verifierDisponibilite(\n    req.body.medecinId,\n    new Date(dateDebut),\n    new Date(dateFin)\n  );\n\n  if (!estDisponible) {\n    return res.status(400).json({ \n      succes: false,\n      message: 'Créneau indisponible',\n      erreurs: [\n        { \n          champ: 'dateDebut', \n          message: 'Le médecin a déjà un rendez-vous à ce créneau horaire' \n        },\n        { \n          champ: 'dateFin', \n          message: 'Le médecin a déjà un rendez-vous à ce créneau horaire' \n        }\n      ]\n    });\n  }\n\n  // Créer le rendez-vous\n  const rendezVous = await RendezVous.create({\n    patient: patientId,\n    patientNom: patientNom || `${patient.prenom} ${patient.nom}`.trim(),\n    patientTelephone: patientTelephone || patient.telephone,\n    medecin: req.body.medecinId,\n    medecinNom: req.body.medecinNom || `${medecin.prenom} ${medecin.nom}`.trim(),\n    dateDebut,\n    dateFin,\n    type,\n    statut: 'confirme', // Par défaut, le rendez-vous est confirmé\n    motif,\n    notes,\n    creePar: req.user.id\n  });\n\n  // Envoyer la réponse avec le rendez-vous formaté\n  res.status(201).json({\n    succes: true,\n    message: 'Rendez-vous créé avec succès',\n    donnees: {\n      rendezVous: formaterRendezVous(rendezVous)\n    }\n  });\n});\n\n// Récupérer tous les rendez-vous avec filtrage\nexports.obtenirRendezVous = asyncHandler(async (req, res) => {\n  const { \n    statut, \n    date, \n    medecinId, \n    patientId,\n    type,\n    page = 1,\n    limit = 10\n  } = req.query;\n  \n  // Construire la requête de base\n  let query = {};\n  \n  // Filtrage par rôle utilisateur\n  if (req.user.role === 'patient') {\n    query.patient = req.user.id;\n  } else if (req.user.role === 'medecin') {\n    query.medecin = req.user.id;\n  } else if (req.user.role === 'secretaire') {\n    // Les secrétaires voient les RDV des médecins qu'elles gèrent\n    // Implémentez cette logique selon votre modèle de données\n  }\n  \n  // Filtres optionnels\n  if (statut) {\n    query.statut = { $in: statut.split(',') };\n  }\n  \n  if (date) {\n    const dateDebut = new Date(date);\n    dateDebut.setHours(0, 0, 0, 0);\n    \n    const dateFin = new Date(dateDebut);\n    dateFin.setDate(dateFin.getDate() + 1);\n    \n    query.dateDebut = {\n      $gte: dateDebut,\n      $lt: dateFin\n    };\n  }\n  \n  if (medecinId) {\n    query.medecin = medecinId;\n  }\n  \n  if (patientId) {\n    query.patient = patientId;\n  }\n  \n  if (type) {\n    query.type = { $in: type.split(',') };\n  }\n  \n  // Exécuter la requête avec pagination\n  const pageInt = parseInt(page, 10);\n  const limitInt = parseInt(limit, 10);\n  const skip = (pageInt - 1) * limitInt;\n  \n  const [total, rendezVous] = await Promise.all([\n    RendezVous.countDocuments(query),\n    RendezVous.find(query)\n      .sort({ dateDebut: 1 })\n      .skip(skip)\n      .limit(limitInt)\n      .populate('patient', 'prenom nom telephone')\n      .populate('medecin', 'prenom nom specialite')\n      .populate('creePar', 'prenom nom role')\n      .lean()\n  ]);\n  \n  // Formater la réponse\n  const resultats = rendezVous.map(formaterRendezVous);\n  \n  // Construire la pagination\n  const pagination = {};\n  const totalPages = Math.ceil(total / limitInt);\n  \n  if (pageInt < totalPages) {\n    pagination.suivant = {\n      page: pageInt + 1,\n      limit: limitInt\n    };\n  }\n  \n  if (pageInt > 1) {\n    pagination.precedent = {\n      page: pageInt - 1,\n      limit: limitInt\n    };\n  }\n  \n  res.status(200).json({\n    succes: true,\n    count: resultats.length,\n    pagination: {\n      ...pagination,\n      total,\n      totalPages,\n      page: pageInt\n    },\n    donnees: {\n      rendezVous: resultats\n    }\n  });\n});\n\n// Mettre à jour un rendez-vous\nexports.mettreAJourRendezVous = asyncHandler(async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ \n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: errors.array().map(err => ({\n        champ: err.param,\n        message: err.msg\n      }))\n    });\n  }\n\n  const { \n    dateDebut, \n    dateFin, \n    statut, \n    notes,\n    motif,\n    type,\n    presenceConfirmee,\n    heureArrivee\n  } = req.body;\n  \n  // Trouver le rendez-vous existant\n  let rendezVous = await RendezVous.findById(req.params.id);\n  \n  if (!rendezVous) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun rendez-vous trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Vérifier les autorisations (propriétaire ou admin)\n  const estProprietaire = [\n    rendezVous.patient.toString(),\n    rendezVous.medecin.toString(),\n    rendezVous.creePar.toString()\n  ].includes(req.user.id);\n  \n  const estAdmin = req.user.role === 'admin';\n  \n  if (!estProprietaire && !estAdmin) {\n    return res.status(403).json({\n      succes: false,\n      message: 'Accès non autorisé',\n      erreurs: [\n        { champ: 'autorisation', message: 'Vous n\\'êtes pas autorisé à modifier ce rendez-vous' }\n      ]\n    });\n  }\n  \n  // Vérifier les conflits de date si la date est modifiée\n  if (dateDebut || dateFin) {\n    const dateDebutRdv = dateDebut ? new Date(dateDebut) : rendezVous.dateDebut;\n    const dateFinRdv = dateFin ? new Date(dateFin) : rendezVous.dateFin;\n    \n    const estDisponible = await RendezVous.verifierDisponibilite(\n      rendezVous.medecin,\n      dateDebutRdv,\n      dateFinRdv,\n      req.params.id // Exclure le RDV actuel de la vérification\n    );\n    \n    if (!estDisponible) {\n      return res.status(400).json({\n        succes: false,\n        message: 'Créneau indisponible',\n        erreurs: [\n          { \n            champ: 'dateDebut', \n            message: 'Le médecin a déjà un rendez-vous à ce créneau horaire' \n          },\n          { \n            champ: 'dateFin', \n            message: 'Le médecin a déjà un rendez-vous à ce créneau horaire' \n          }\n        ]\n      });\n    }\n  }\n  \n  // Construire l'objet de mise à jour\n  const champsMiseAJour = {};\n  \n  // Champs modifiables\n  if (dateDebut) champsMiseAJour.dateDebut = dateDebut;\n  if (dateFin) champsMiseAJour.dateFin = dateFin;\n  if (statut) champsMiseAJour.statut = statut;\n  if (motif !== undefined) champsMiseAJour.motif = motif;\n  if (type) champsMiseAJour.type = type;\n  if (notes !== undefined) champsMiseAJour.notes = notes;\n  \n  // Mise à jour de la présence\n  if (presenceConfirmee !== undefined) {\n    champsMiseAJour.presenceConfirmee = presenceConfirmee;\n    if (presenceConfirmee && !rendezVous.heureArrivee) {\n      champsMiseAJour.heureArrivee = new Date();\n    } else if (!presenceConfirmee) {\n      champsMiseAJour.heureArrivee = null;\n    }\n  }\n  \n  if (heureArrivee && !champsMiseAJour.heureArrivee) {\n    champsMiseAJour.heureArrivee = heureArrivee;\n  }\n  \n  // Mettre à jour le rendez-vous\n  rendezVous = await RendezVous.findByIdAndUpdate(\n    req.params.id,\n    { \n      ...champsMiseAJour,\n      modifiePar: req.user.id,\n      dateMiseAJour: Date.now()\n    },\n    { \n      new: true, \n      runValidators: true,\n      context: 'query'\n    }\n  )\n  .populate('patient', 'prenom nom telephone')\n  .populate('medecin', 'prenom nom specialite')\n  .populate('creePar', 'prenom nom role')\n  .lean();\n  \n  // Envoyer la réponse avec le rendez-vous formaté\n  res.status(200).json({\n    succes: true,\n    message: 'Rendez-vous mis à jour avec succès',\n    donnees: {\n      rendezVous: formaterRendezVous(rendezVous)\n    }\n  });\n});\n\n// Supprimer un rendez-vous\nexports.supprimerRendezVous = asyncHandler(async (req, res) => {\n  // Trouver le rendez-vous existant\n  const rendezVous = await RendezVous.findById(req.params.id);\n  \n  if (!rendezVous) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun rendez-vous trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Vérifier les autorisations (propriétaire ou admin)\n  const estProprietaire = [\n    rendezVous.patient.toString(),\n    rendezVous.medecin.toString(),\n    rendezVous.creePar.toString()\n  ].includes(req.user.id);\n  \n  const estAdmin = req.user.role === 'admin';\n  \n  if (!estProprietaire && !estAdmin) {\n    return res.status(403).json({\n      succes: false,\n      message: 'Accès non autorisé',\n      erreurs: [\n        { champ: 'autorisation', message: 'Vous n\\'êtes pas autorisé à supprimer ce rendez-vous' }\n      ]\n    });\n  }\n  \n  // Vérifier si la suppression est autorisée (par exemple, pas de suppression après la date du RDV)\n  const maintenant = new Date();\n  const dateDebutRdv = new Date(rendezVous.dateDebut);\n  \n  if (maintenant > dateDebutRdv && !estAdmin) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Opération non autorisée',\n      erreurs: [\n        { \n          champ: 'dateDebut', \n          message: 'Impossible de supprimer un rendez-vous déjà passé. Veuillez contacter l\\'administration.' \n        }\n      ]\n    });\n  }\n  \n  // Supprimer le rendez-vous (soft delete)\n  rendezVous.supprime = true;\n  rendezVous.supprimePar = req.user.id;\n  rendezVous.dateSuppression = Date.now();\n  \n  await rendezVous.save();\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Rendez-vous supprimé avec succès',\n    donnees: {}\n  });\n});\n\n// Marquer un rendez-vous comme commencé\nexports.commencerRendezVous = asyncHandler(async (req, res) => {\n  // Trouver le rendez-vous existant\n  const rendezVous = await RendezVous.findById(req.params.id);\n  \n  if (!rendezVous) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun rendez-vous trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Vérifier que l'utilisateur est le médecin associé au rendez-vous\n  if (rendezVous.medecin.toString() !== req.user.id) {\n    return res.status(403).json({\n      succes: false,\n      message: 'Accès non autorisé',\n      erreurs: [\n        { \n          champ: 'autorisation', \n          message: 'Seul le médecin associé peut marquer le rendez-vous comme commencé' \n        }\n      ]\n    });\n  }\n  \n  const maintenant = new Date();\n  const dateDebutRdv = new Date(rendezVous.dateDebut);\n  const dateFinRdv = new Date(rendezVous.dateFin);\n  \n  // Vérifier que le rendez-vous est confirmé\n  if (rendezVous.statut !== 'confirme' && rendezVous.statut !== 'en_retard') {\n    return res.status(400).json({\n      succes: false,\n      message: 'Opération non autorisée',\n      erreurs: [\n        { \n          champ: 'statut', \n          message: `Le rendez-vous doit être confirmé pour être marqué comme commencé. Statut actuel: ${rendezVous.statut}`\n        }\n      ]\n    });\n  }\n  \n  // Vérifier que le rendez-vous n'est pas déjà terminé\n  if (rendezVous.statut === 'termine') {\n    return res.status(400).json({\n      succes: false,\n      message: 'Opération non autorisée',\n      erreurs: [\n        { \n          champ: 'statut', \n          message: 'Impossible de démarrer un rendez-vous déjà terminé'\n        }\n      ]\n    });\n  }\n  \n  // Vérifier que le rendez-vous n'est pas dans le futur\n  if (maintenant < dateDebutRdv) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Opération non autorisée',\n      erreurs: [\n        { \n          champ: 'dateDebut', \n          message: 'Impossible de démarrer un rendez-vous avant son heure de début prévue'\n        }\n      ]\n    });\n  }\n  \n  // Mettre à jour le statut et l'heure de début\n  rendezVous.statut = 'en_cours';\n  rendezVous.heureDebut = maintenant;\n  rendezVous.modifiePar = req.user.id;\n  rendezVous.dateMiseAJour = maintenant;\n  \n  // Si le rendez-vous commence en retard, noter le retard\n  if (maintenant > dateDebutRdv) {\n    const retardEnMinutes = Math.floor((maintenant - dateDebutRdv) / (1000 * 60));\n    rendezVous.retardMinutes = retardEnMinutes;\n    \n    // Envoyer une notification de retard si nécessaire\n    // À implémenter : système de notification\n  }\n  \n  await rendezVous.save();\n  \n  // Peupler les données pour la réponse\n  const rendezVousPopule = await RendezVous.findById(rendezVous._id)\n    .populate('patient', 'prenom nom telephone')\n    .populate('medecin', 'prenom nom specialite')\n    .populate('creePar', 'prenom nom role')\n    .lean();\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Rendez-vous marqué comme commencé avec succès',\n    donnees: {\n      rendezVous: formaterRendezVous(rendezVousPopule)\n    }\n  });\n});\n\n// Marquer un rendez-vous comme terminé\nexports.terminerRendezVous = asyncHandler(async (req, res) => {\n  // Trouver le rendez-vous existant\n  const rendezVous = await RendezVous.findById(req.params.id);\n  \n  if (!rendezVous) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun rendez-vous trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Vérifier que l'utilisateur est le médecin associé au rendez-vous\n  if (rendezVous.medecin.toString() !== req.user.id) {\n    return res.status(403).json({\n      succes: false,\n      message: 'Accès non autorisé',\n      erreurs: [\n        { \n          champ: 'autorisation', \n          message: 'Seul le médecin associé peut marquer le rendez-vous comme terminé' \n        }\n      ]\n    });\n  }\n  \n  const maintenant = new Date();\n  const dateDebutRdv = new Date(rendezVous.dateDebut);\n  const dateFinRdv = new Date(rendezVous.dateFin);\n  \n  // Vérifier que le rendez-vous est en cours\n  if (rendezVous.statut !== 'en_cours') {\n    return res.status(400).json({\n      succes: false,\n      message: 'Opération non autorisée',\n      erreurs: [\n        { \n          champ: 'statut', \n          message: `Le rendez-vous doit être en cours pour être marqué comme terminé. Statut actuel: ${rendezVous.statut}`\n        }\n      ]\n    });\n  }\n  \n  // Vérifier que le rendez-vous a bien commencé\n  if (!rendezVous.heureDebut) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Opération non autorisée',\n      erreurs: [\n        { \n          champ: 'statut', \n          message: 'Impossible de terminer un rendez-vous qui n\\'a pas commencé'\n        }\n      ]\n    });\n  }\n  \n  // Calculer la durée réelle en minutes\n  const dureeReelleMinutes = Math.floor((maintenant - rendezVous.heureDebut) / (1000 * 60));\n  \n  // Calculer le dépassement éventuel\n  const dureePrevueMinutes = Math.floor((dateFinRdv - dateDebutRdv) / (1000 * 60));\n  const depassementMinutes = dureeReelleMinutes - dureePrevueMinutes;\n  \n  // Mettre à jour le rendez-vous\n  rendezVous.statut = 'termine';\n  rendezVous.heureFin = maintenant;\n  rendezVous.dureeReelleMinutes = dureeReelleMinutes;\n  \n  if (depassementMinutes > 0) {\n    rendezVous.depassementMinutes = depassementMinutes;\n    \n    // Marquer comme dépassement si significatif (plus de 5 minutes)\n    if (depassementMinutes > 5) {\n      rendezVous.avecDepassement = true;\n      \n      // Envoyer une notification pour dépassement si nécessaire\n      // À implémenter : système de notification\n    }\n  }\n  \n  rendezVous.modifiePar = req.user.id;\n  rendezVous.dateMiseAJour = maintenant;\n  \n  await rendezVous.save();\n  \n  // Peupler les données pour la réponse\n  const rendezVousPopule = await RendezVous.findById(rendezVous._id)\n    .populate('patient', 'prenom nom telephone')\n    .populate('medecin', 'prenom nom specialite')\n    .populate('creePar', 'prenom nom role')\n    .lean();\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Rendez-vous marqué comme terminé avec succès',\n    donnees: {\n      rendezVous: formaterRendezVous(rendezVousPopule),\n      dureeReelleMinutes,\n      depassementMinutes: depassementMinutes > 0 ? depassementMinutes : 0\n    }\n  });\n});\n"],"mappings":"aAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAMC,WAAW,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACpD,MAAM,EAAEE,gBAAgB,CAAC,CAAC,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACzD,MAAMG,YAAY,GAAGH,OAAO,CAAC,uBAAuB,CAAC;;AAErD;AACA,MAAMI,kBAAkB,GAAGA,CAACC,UAAU,MAAM;EAC1CC,GAAG,EAAED,UAAU,CAACC,GAAG;EACnBC,OAAO,EAAEF,UAAU,CAACE,OAAO;EAC3BC,UAAU,EAAEH,UAAU,CAACG,UAAU;EACjCC,gBAAgB,EAAEJ,UAAU,CAACI,gBAAgB;EAC7CC,OAAO,EAAEL,UAAU,CAACK,OAAO;EAC3BC,UAAU,EAAEN,UAAU,CAACM,UAAU;EACjCC,SAAS,EAAEP,UAAU,CAACO,SAAS;EAC/BC,OAAO,EAAER,UAAU,CAACQ,OAAO;EAC3BC,IAAI,EAAET,UAAU,CAACS,IAAI;EACrBC,MAAM,EAAEV,UAAU,CAACU,MAAM;EACzBC,KAAK,EAAEX,UAAU,CAACW,KAAK;EACvBC,KAAK,EAAEZ,UAAU,CAACY,KAAK;EACvBC,iBAAiB,EAAEb,UAAU,CAACa,iBAAiB;EAC/CC,YAAY,EAAEd,UAAU,CAACc,YAAY;EACrCC,OAAO,EAAEf,UAAU,CAACgB,MAAM;EAC1BC,YAAY,EAAEjB,UAAU,CAACiB;AAC3B,CAAC,CAAC;;AAEF;AACAC,OAAO,CAACC,eAAe,GAAGrB,YAAY,CAAC,OAAOsB,GAAG,EAAEC,GAAG,KAAK;EACzD,MAAMC,MAAM,GAAGzB,gBAAgB,CAACuB,GAAG,CAAC;EACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;IACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,sBAAsB;MAC/BC,OAAO,EAAEN,MAAM,CAACO,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,CAAAC,GAAG,MAAK;QAClCC,KAAK,EAAED,GAAG,CAACE,KAAK;QAChBN,OAAO,EAAEI,GAAG,CAACG;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA,MAAM;IACJC,SAAS;IACThC,UAAU;IACVC,gBAAgB;IAChBG,SAAS;IACTC,OAAO;IACPC,IAAI;IACJE,KAAK;IACLC;EACF,CAAC,GAAGQ,GAAG,CAACgB,IAAI;;EAEZ;EACA,MAAMlC,OAAO,GAAG,MAAMN,WAAW,CAACyC,QAAQ,CAACF,SAAS,CAAC,CAACG,MAAM,CAAC,4BAA4B,CAAC;EAC1F,IAAI,CAACpC,OAAO,EAAE;IACZ,OAAOmB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,sBAAsB;MAC/BC,OAAO,EAAE;MACP,EAAEI,KAAK,EAAE,WAAW,EAAEL,OAAO,EAAE,gCAAgC,CAAC,CAAC;;IAErE,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMtB,OAAO,GAAG,MAAMT,WAAW,CAAC2C,OAAO,CAAC;IACxCtC,GAAG,EAAEmB,GAAG,CAACgB,IAAI,CAACI,SAAS;IACvBC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE;EACT,CAAC,CAAC,CAACJ,MAAM,CAAC,uBAAuB,CAAC;;EAElC,IAAI,CAACjC,OAAO,EAAE;IACZ,OAAOgB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,sBAAsB;MAC/BC,OAAO,EAAE;MACP,EAAEI,KAAK,EAAE,WAAW,EAAEL,OAAO,EAAE,+BAA+B,CAAC,CAAC;;IAEpE,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMgB,aAAa,GAAG,MAAMjD,UAAU,CAACkD,qBAAqB;IAC1DxB,GAAG,CAACgB,IAAI,CAACI,SAAS;IAClB,IAAIK,IAAI,CAACtC,SAAS,CAAC;IACnB,IAAIsC,IAAI,CAACrC,OAAO;EAClB,CAAC;;EAED,IAAI,CAACmC,aAAa,EAAE;IAClB,OAAOtB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,sBAAsB;MAC/BC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,WAAW;QAClBL,OAAO,EAAE;MACX,CAAC;MACD;QACEK,KAAK,EAAE,SAAS;QAChBL,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA;EACA,MAAM3B,UAAU,GAAG,MAAMN,UAAU,CAACoD,MAAM,CAAC;IACzC5C,OAAO,EAAEiC,SAAS;IAClBhC,UAAU,EAAEA,UAAU,IAAI,GAAGD,OAAO,CAAC6C,MAAM,IAAI7C,OAAO,CAAC8C,GAAG,EAAE,CAACC,IAAI,CAAC,CAAC;IACnE7C,gBAAgB,EAAEA,gBAAgB,IAAIF,OAAO,CAACgD,SAAS;IACvD7C,OAAO,EAAEe,GAAG,CAACgB,IAAI,CAACI,SAAS;IAC3BlC,UAAU,EAAEc,GAAG,CAACgB,IAAI,CAAC9B,UAAU,IAAI,GAAGD,OAAO,CAAC0C,MAAM,IAAI1C,OAAO,CAAC2C,GAAG,EAAE,CAACC,IAAI,CAAC,CAAC;IAC5E1C,SAAS;IACTC,OAAO;IACPC,IAAI;IACJC,MAAM,EAAE,UAAU,EAAE;IACpBC,KAAK;IACLC,KAAK;IACLG,OAAO,EAAEK,GAAG,CAAC+B,IAAI,CAACC;EACpB,CAAC,CAAC;;EAEF;EACA/B,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IACnBC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,8BAA8B;IACvC0B,OAAO,EAAE;MACPrD,UAAU,EAAED,kBAAkB,CAACC,UAAU;IAC3C;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAkB,OAAO,CAACoC,iBAAiB,GAAGxD,YAAY,CAAC,OAAOsB,GAAG,EAAEC,GAAG,KAAK;EAC3D,MAAM;IACJX,MAAM;IACN6C,IAAI;IACJf,SAAS;IACTL,SAAS;IACT1B,IAAI;IACJ+C,IAAI,GAAG,CAAC;IACRC,KAAK,GAAG;EACV,CAAC,GAAGrC,GAAG,CAACsC,KAAK;;EAEb;EACA,IAAIA,KAAK,GAAG,CAAC,CAAC;;EAEd;EACA,IAAItC,GAAG,CAAC+B,IAAI,CAACV,IAAI,KAAK,SAAS,EAAE;IAC/BiB,KAAK,CAACxD,OAAO,GAAGkB,GAAG,CAAC+B,IAAI,CAACC,EAAE;EAC7B,CAAC,MAAM,IAAIhC,GAAG,CAAC+B,IAAI,CAACV,IAAI,KAAK,SAAS,EAAE;IACtCiB,KAAK,CAACrD,OAAO,GAAGe,GAAG,CAAC+B,IAAI,CAACC,EAAE;EAC7B,CAAC,MAAM,IAAIhC,GAAG,CAAC+B,IAAI,CAACV,IAAI,KAAK,YAAY,EAAE;;;IACzC;IACA;EAAA,CACD,CAED;EACA,IAAI/B,MAAM,EAAE;IACVgD,KAAK,CAAChD,MAAM,GAAG,EAAEiD,GAAG,EAAEjD,MAAM,CAACkD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;EAC3C;;EAEA,IAAIL,IAAI,EAAE;IACR,MAAMhD,SAAS,GAAG,IAAIsC,IAAI,CAACU,IAAI,CAAC;IAChChD,SAAS,CAACsD,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAE9B,MAAMrD,OAAO,GAAG,IAAIqC,IAAI,CAACtC,SAAS,CAAC;IACnCC,OAAO,CAACsD,OAAO,CAACtD,OAAO,CAACuD,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;;IAEtCL,KAAK,CAACnD,SAAS,GAAG;MAChByD,IAAI,EAAEzD,SAAS;MACf0D,GAAG,EAAEzD;IACP,CAAC;EACH;;EAEA,IAAIgC,SAAS,EAAE;IACbkB,KAAK,CAACrD,OAAO,GAAGmC,SAAS;EAC3B;;EAEA,IAAIL,SAAS,EAAE;IACbuB,KAAK,CAACxD,OAAO,GAAGiC,SAAS;EAC3B;;EAEA,IAAI1B,IAAI,EAAE;IACRiD,KAAK,CAACjD,IAAI,GAAG,EAAEkD,GAAG,EAAElD,IAAI,CAACmD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;EACvC;;EAEA;EACA,MAAMM,OAAO,GAAGC,QAAQ,CAACX,IAAI,EAAE,EAAE,CAAC;EAClC,MAAMY,QAAQ,GAAGD,QAAQ,CAACV,KAAK,EAAE,EAAE,CAAC;EACpC,MAAMY,IAAI,GAAG,CAACH,OAAO,GAAG,CAAC,IAAIE,QAAQ;;EAErC,MAAM,CAACE,KAAK,EAAEtE,UAAU,CAAC,GAAG,MAAMuE,OAAO,CAACC,GAAG,CAAC;EAC5C9E,UAAU,CAAC+E,cAAc,CAACf,KAAK,CAAC;EAChChE,UAAU,CAACgF,IAAI,CAAChB,KAAK,CAAC;EACnBiB,IAAI,CAAC,EAAEpE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;EACtB8D,IAAI,CAACA,IAAI,CAAC;EACVZ,KAAK,CAACW,QAAQ,CAAC;EACfQ,QAAQ,CAAC,SAAS,EAAE,sBAAsB,CAAC;EAC3CA,QAAQ,CAAC,SAAS,EAAE,uBAAuB,CAAC;EAC5CA,QAAQ,CAAC,SAAS,EAAE,iBAAiB,CAAC;EACtCC,IAAI,CAAC,CAAC;EACV,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAG9E,UAAU,CAAC8B,GAAG,CAAC/B,kBAAkB,CAAC;;EAEpD;EACA,MAAMgF,UAAU,GAAG,CAAC,CAAC;EACrB,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACZ,KAAK,GAAGF,QAAQ,CAAC;;EAE9C,IAAIF,OAAO,GAAGc,UAAU,EAAE;IACxBD,UAAU,CAACI,OAAO,GAAG;MACnB3B,IAAI,EAAEU,OAAO,GAAG,CAAC;MACjBT,KAAK,EAAEW;IACT,CAAC;EACH;;EAEA,IAAIF,OAAO,GAAG,CAAC,EAAE;IACfa,UAAU,CAACK,SAAS,GAAG;MACrB5B,IAAI,EAAEU,OAAO,GAAG,CAAC;MACjBT,KAAK,EAAEW;IACT,CAAC;EACH;;EAEA/C,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IACnBC,MAAM,EAAE,IAAI;IACZ2D,KAAK,EAAEP,SAAS,CAACQ,MAAM;IACvBP,UAAU,EAAE;MACV,GAAGA,UAAU;MACbT,KAAK;MACLU,UAAU;MACVxB,IAAI,EAAEU;IACR,CAAC;IACDb,OAAO,EAAE;MACPrD,UAAU,EAAE8E;IACd;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA5D,OAAO,CAACqE,qBAAqB,GAAGzF,YAAY,CAAC,OAAOsB,GAAG,EAAEC,GAAG,KAAK;EAC/D,MAAMC,MAAM,GAAGzB,gBAAgB,CAACuB,GAAG,CAAC;EACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;IACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,sBAAsB;MAC/BC,OAAO,EAAEN,MAAM,CAACO,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,CAAAC,GAAG,MAAK;QAClCC,KAAK,EAAED,GAAG,CAACE,KAAK;QAChBN,OAAO,EAAEI,GAAG,CAACG;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA,MAAM;IACJ3B,SAAS;IACTC,OAAO;IACPE,MAAM;IACNE,KAAK;IACLD,KAAK;IACLF,IAAI;IACJI,iBAAiB;IACjBC;EACF,CAAC,GAAGM,GAAG,CAACgB,IAAI;;EAEZ;EACA,IAAIpC,UAAU,GAAG,MAAMN,UAAU,CAAC2C,QAAQ,CAACjB,GAAG,CAACoE,MAAM,CAACpC,EAAE,CAAC;;EAEzD,IAAI,CAACpD,UAAU,EAAE;IACf,OAAOqB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,uBAAuB;MAChCC,OAAO,EAAE;MACP,EAAEI,KAAK,EAAE,IAAI,EAAEL,OAAO,EAAE,sCAAsC,CAAC,CAAC;;IAEpE,CAAC,CAAC;EACJ;;EAEA;EACA,MAAM8D,eAAe,GAAG;EACtBzF,UAAU,CAACE,OAAO,CAACwF,QAAQ,CAAC,CAAC;EAC7B1F,UAAU,CAACK,OAAO,CAACqF,QAAQ,CAAC,CAAC;EAC7B1F,UAAU,CAACe,OAAO,CAAC2E,QAAQ,CAAC,CAAC,CAC9B;EAACC,QAAQ,CAACvE,GAAG,CAAC+B,IAAI,CAACC,EAAE,CAAC;;EAEvB,MAAMwC,QAAQ,GAAGxE,GAAG,CAAC+B,IAAI,CAACV,IAAI,KAAK,OAAO;;EAE1C,IAAI,CAACgD,eAAe,IAAI,CAACG,QAAQ,EAAE;IACjC,OAAOvE,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,oBAAoB;MAC7BC,OAAO,EAAE;MACP,EAAEI,KAAK,EAAE,cAAc,EAAEL,OAAO,EAAE,qDAAqD,CAAC,CAAC;;IAE7F,CAAC,CAAC;EACJ;;EAEA;EACA,IAAIpB,SAAS,IAAIC,OAAO,EAAE;IACxB,MAAMqF,YAAY,GAAGtF,SAAS,GAAG,IAAIsC,IAAI,CAACtC,SAAS,CAAC,GAAGP,UAAU,CAACO,SAAS;IAC3E,MAAMuF,UAAU,GAAGtF,OAAO,GAAG,IAAIqC,IAAI,CAACrC,OAAO,CAAC,GAAGR,UAAU,CAACQ,OAAO;;IAEnE,MAAMmC,aAAa,GAAG,MAAMjD,UAAU,CAACkD,qBAAqB;MAC1D5C,UAAU,CAACK,OAAO;MAClBwF,YAAY;MACZC,UAAU;MACV1E,GAAG,CAACoE,MAAM,CAACpC,EAAE,CAAC;IAChB,CAAC;;IAED,IAAI,CAACT,aAAa,EAAE;MAClB,OAAOtB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,sBAAsB;QAC/BC,OAAO,EAAE;QACP;UACEI,KAAK,EAAE,WAAW;UAClBL,OAAO,EAAE;QACX,CAAC;QACD;UACEK,KAAK,EAAE,SAAS;UAChBL,OAAO,EAAE;QACX,CAAC;;MAEL,CAAC,CAAC;IACJ;EACF;;EAEA;EACA,MAAMoE,eAAe,GAAG,CAAC,CAAC;;EAE1B;EACA,IAAIxF,SAAS,EAAEwF,eAAe,CAACxF,SAAS,GAAGA,SAAS;EACpD,IAAIC,OAAO,EAAEuF,eAAe,CAACvF,OAAO,GAAGA,OAAO;EAC9C,IAAIE,MAAM,EAAEqF,eAAe,CAACrF,MAAM,GAAGA,MAAM;EAC3C,IAAIC,KAAK,KAAKqF,SAAS,EAAED,eAAe,CAACpF,KAAK,GAAGA,KAAK;EACtD,IAAIF,IAAI,EAAEsF,eAAe,CAACtF,IAAI,GAAGA,IAAI;EACrC,IAAIG,KAAK,KAAKoF,SAAS,EAAED,eAAe,CAACnF,KAAK,GAAGA,KAAK;;EAEtD;EACA,IAAIC,iBAAiB,KAAKmF,SAAS,EAAE;IACnCD,eAAe,CAAClF,iBAAiB,GAAGA,iBAAiB;IACrD,IAAIA,iBAAiB,IAAI,CAACb,UAAU,CAACc,YAAY,EAAE;MACjDiF,eAAe,CAACjF,YAAY,GAAG,IAAI+B,IAAI,CAAC,CAAC;IAC3C,CAAC,MAAM,IAAI,CAAChC,iBAAiB,EAAE;MAC7BkF,eAAe,CAACjF,YAAY,GAAG,IAAI;IACrC;EACF;;EAEA,IAAIA,YAAY,IAAI,CAACiF,eAAe,CAACjF,YAAY,EAAE;IACjDiF,eAAe,CAACjF,YAAY,GAAGA,YAAY;EAC7C;;EAEA;EACAd,UAAU,GAAG,MAAMN,UAAU,CAACuG,iBAAiB;IAC7C7E,GAAG,CAACoE,MAAM,CAACpC,EAAE;IACb;MACE,GAAG2C,eAAe;MAClBG,UAAU,EAAE9E,GAAG,CAAC+B,IAAI,CAACC,EAAE;MACvB+C,aAAa,EAAEtD,IAAI,CAACuD,GAAG,CAAC;IAC1B,CAAC;IACD;MACEC,GAAG,EAAE,IAAI;MACTC,aAAa,EAAE,IAAI;MACnBC,OAAO,EAAE;IACX;EACF,CAAC;EACA3B,QAAQ,CAAC,SAAS,EAAE,sBAAsB,CAAC;EAC3CA,QAAQ,CAAC,SAAS,EAAE,uBAAuB,CAAC;EAC5CA,QAAQ,CAAC,SAAS,EAAE,iBAAiB,CAAC;EACtCC,IAAI,CAAC,CAAC;;EAEP;EACAxD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IACnBC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,oCAAoC;IAC7C0B,OAAO,EAAE;MACPrD,UAAU,EAAED,kBAAkB,CAACC,UAAU;IAC3C;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAkB,OAAO,CAACsF,mBAAmB,GAAG1G,YAAY,CAAC,OAAOsB,GAAG,EAAEC,GAAG,KAAK;EAC7D;EACA,MAAMrB,UAAU,GAAG,MAAMN,UAAU,CAAC2C,QAAQ,CAACjB,GAAG,CAACoE,MAAM,CAACpC,EAAE,CAAC;;EAE3D,IAAI,CAACpD,UAAU,EAAE;IACf,OAAOqB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,uBAAuB;MAChCC,OAAO,EAAE;MACP,EAAEI,KAAK,EAAE,IAAI,EAAEL,OAAO,EAAE,sCAAsC,CAAC,CAAC;;IAEpE,CAAC,CAAC;EACJ;;EAEA;EACA,MAAM8D,eAAe,GAAG;EACtBzF,UAAU,CAACE,OAAO,CAACwF,QAAQ,CAAC,CAAC;EAC7B1F,UAAU,CAACK,OAAO,CAACqF,QAAQ,CAAC,CAAC;EAC7B1F,UAAU,CAACe,OAAO,CAAC2E,QAAQ,CAAC,CAAC,CAC9B;EAACC,QAAQ,CAACvE,GAAG,CAAC+B,IAAI,CAACC,EAAE,CAAC;;EAEvB,MAAMwC,QAAQ,GAAGxE,GAAG,CAAC+B,IAAI,CAACV,IAAI,KAAK,OAAO;;EAE1C,IAAI,CAACgD,eAAe,IAAI,CAACG,QAAQ,EAAE;IACjC,OAAOvE,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,oBAAoB;MAC7BC,OAAO,EAAE;MACP,EAAEI,KAAK,EAAE,cAAc,EAAEL,OAAO,EAAE,sDAAsD,CAAC,CAAC;;IAE9F,CAAC,CAAC;EACJ;;EAEA;EACA,MAAM8E,UAAU,GAAG,IAAI5D,IAAI,CAAC,CAAC;EAC7B,MAAMgD,YAAY,GAAG,IAAIhD,IAAI,CAAC7C,UAAU,CAACO,SAAS,CAAC;;EAEnD,IAAIkG,UAAU,GAAGZ,YAAY,IAAI,CAACD,QAAQ,EAAE;IAC1C,OAAOvE,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,yBAAyB;MAClCC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,WAAW;QAClBL,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA;EACA3B,UAAU,CAAC0G,QAAQ,GAAG,IAAI;EAC1B1G,UAAU,CAAC2G,WAAW,GAAGvF,GAAG,CAAC+B,IAAI,CAACC,EAAE;EACpCpD,UAAU,CAAC4G,eAAe,GAAG/D,IAAI,CAACuD,GAAG,CAAC,CAAC;;EAEvC,MAAMpG,UAAU,CAAC6G,IAAI,CAAC,CAAC;;EAEvBxF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IACnBC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,kCAAkC;IAC3C0B,OAAO,EAAE,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAnC,OAAO,CAAC4F,mBAAmB,GAAGhH,YAAY,CAAC,OAAOsB,GAAG,EAAEC,GAAG,KAAK;EAC7D;EACA,MAAMrB,UAAU,GAAG,MAAMN,UAAU,CAAC2C,QAAQ,CAACjB,GAAG,CAACoE,MAAM,CAACpC,EAAE,CAAC;;EAE3D,IAAI,CAACpD,UAAU,EAAE;IACf,OAAOqB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,uBAAuB;MAChCC,OAAO,EAAE;MACP,EAAEI,KAAK,EAAE,IAAI,EAAEL,OAAO,EAAE,sCAAsC,CAAC,CAAC;;IAEpE,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI3B,UAAU,CAACK,OAAO,CAACqF,QAAQ,CAAC,CAAC,KAAKtE,GAAG,CAAC+B,IAAI,CAACC,EAAE,EAAE;IACjD,OAAO/B,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,oBAAoB;MAC7BC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,cAAc;QACrBL,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA,MAAM8E,UAAU,GAAG,IAAI5D,IAAI,CAAC,CAAC;EAC7B,MAAMgD,YAAY,GAAG,IAAIhD,IAAI,CAAC7C,UAAU,CAACO,SAAS,CAAC;EACnD,MAAMuF,UAAU,GAAG,IAAIjD,IAAI,CAAC7C,UAAU,CAACQ,OAAO,CAAC;;EAE/C;EACA,IAAIR,UAAU,CAACU,MAAM,KAAK,UAAU,IAAIV,UAAU,CAACU,MAAM,KAAK,WAAW,EAAE;IACzE,OAAOW,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,yBAAyB;MAClCC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,QAAQ;QACfL,OAAO,EAAE,qFAAqF3B,UAAU,CAACU,MAAM;MACjH,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA;EACA,IAAIV,UAAU,CAACU,MAAM,KAAK,SAAS,EAAE;IACnC,OAAOW,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,yBAAyB;MAClCC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,QAAQ;QACfL,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI8E,UAAU,GAAGZ,YAAY,EAAE;IAC7B,OAAOxE,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,yBAAyB;MAClCC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,WAAW;QAClBL,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA;EACA3B,UAAU,CAACU,MAAM,GAAG,UAAU;EAC9BV,UAAU,CAAC+G,UAAU,GAAGN,UAAU;EAClCzG,UAAU,CAACkG,UAAU,GAAG9E,GAAG,CAAC+B,IAAI,CAACC,EAAE;EACnCpD,UAAU,CAACmG,aAAa,GAAGM,UAAU;;EAErC;EACA,IAAIA,UAAU,GAAGZ,YAAY,EAAE;IAC7B,MAAMmB,eAAe,GAAG/B,IAAI,CAACgC,KAAK,CAAC,CAACR,UAAU,GAAGZ,YAAY,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC;IAC7E7F,UAAU,CAACkH,aAAa,GAAGF,eAAe;;IAE1C;IACA;EACF;;EAEA,MAAMhH,UAAU,CAAC6G,IAAI,CAAC,CAAC;;EAEvB;EACA,MAAMM,gBAAgB,GAAG,MAAMzH,UAAU,CAAC2C,QAAQ,CAACrC,UAAU,CAACC,GAAG,CAAC;EAC/D2E,QAAQ,CAAC,SAAS,EAAE,sBAAsB,CAAC;EAC3CA,QAAQ,CAAC,SAAS,EAAE,uBAAuB,CAAC;EAC5CA,QAAQ,CAAC,SAAS,EAAE,iBAAiB,CAAC;EACtCC,IAAI,CAAC,CAAC;;EAETxD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IACnBC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,+CAA+C;IACxD0B,OAAO,EAAE;MACPrD,UAAU,EAAED,kBAAkB,CAACoH,gBAAgB;IACjD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAjG,OAAO,CAACkG,kBAAkB,GAAGtH,YAAY,CAAC,OAAOsB,GAAG,EAAEC,GAAG,KAAK;EAC5D;EACA,MAAMrB,UAAU,GAAG,MAAMN,UAAU,CAAC2C,QAAQ,CAACjB,GAAG,CAACoE,MAAM,CAACpC,EAAE,CAAC;;EAE3D,IAAI,CAACpD,UAAU,EAAE;IACf,OAAOqB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,uBAAuB;MAChCC,OAAO,EAAE;MACP,EAAEI,KAAK,EAAE,IAAI,EAAEL,OAAO,EAAE,sCAAsC,CAAC,CAAC;;IAEpE,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI3B,UAAU,CAACK,OAAO,CAACqF,QAAQ,CAAC,CAAC,KAAKtE,GAAG,CAAC+B,IAAI,CAACC,EAAE,EAAE;IACjD,OAAO/B,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,oBAAoB;MAC7BC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,cAAc;QACrBL,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA,MAAM8E,UAAU,GAAG,IAAI5D,IAAI,CAAC,CAAC;EAC7B,MAAMgD,YAAY,GAAG,IAAIhD,IAAI,CAAC7C,UAAU,CAACO,SAAS,CAAC;EACnD,MAAMuF,UAAU,GAAG,IAAIjD,IAAI,CAAC7C,UAAU,CAACQ,OAAO,CAAC;;EAE/C;EACA,IAAIR,UAAU,CAACU,MAAM,KAAK,UAAU,EAAE;IACpC,OAAOW,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,yBAAyB;MAClCC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,QAAQ;QACfL,OAAO,EAAE,oFAAoF3B,UAAU,CAACU,MAAM;MAChH,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI,CAACV,UAAU,CAAC+G,UAAU,EAAE;IAC1B,OAAO1F,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,yBAAyB;MAClCC,OAAO,EAAE;MACP;QACEI,KAAK,EAAE,QAAQ;QACfL,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;EACJ;;EAEA;EACA,MAAM0F,kBAAkB,GAAGpC,IAAI,CAACgC,KAAK,CAAC,CAACR,UAAU,GAAGzG,UAAU,CAAC+G,UAAU,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC;;EAEzF;EACA,MAAMO,kBAAkB,GAAGrC,IAAI,CAACgC,KAAK,CAAC,CAACnB,UAAU,GAAGD,YAAY,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC;EAChF,MAAM0B,kBAAkB,GAAGF,kBAAkB,GAAGC,kBAAkB;;EAElE;EACAtH,UAAU,CAACU,MAAM,GAAG,SAAS;EAC7BV,UAAU,CAACwH,QAAQ,GAAGf,UAAU;EAChCzG,UAAU,CAACqH,kBAAkB,GAAGA,kBAAkB;;EAElD,IAAIE,kBAAkB,GAAG,CAAC,EAAE;IAC1BvH,UAAU,CAACuH,kBAAkB,GAAGA,kBAAkB;;IAElD;IACA,IAAIA,kBAAkB,GAAG,CAAC,EAAE;MAC1BvH,UAAU,CAACyH,eAAe,GAAG,IAAI;;MAEjC;MACA;IACF;EACF;;EAEAzH,UAAU,CAACkG,UAAU,GAAG9E,GAAG,CAAC+B,IAAI,CAACC,EAAE;EACnCpD,UAAU,CAACmG,aAAa,GAAGM,UAAU;;EAErC,MAAMzG,UAAU,CAAC6G,IAAI,CAAC,CAAC;;EAEvB;EACA,MAAMM,gBAAgB,GAAG,MAAMzH,UAAU,CAAC2C,QAAQ,CAACrC,UAAU,CAACC,GAAG,CAAC;EAC/D2E,QAAQ,CAAC,SAAS,EAAE,sBAAsB,CAAC;EAC3CA,QAAQ,CAAC,SAAS,EAAE,uBAAuB,CAAC;EAC5CA,QAAQ,CAAC,SAAS,EAAE,iBAAiB,CAAC;EACtCC,IAAI,CAAC,CAAC;;EAETxD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IACnBC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,8CAA8C;IACvD0B,OAAO,EAAE;MACPrD,UAAU,EAAED,kBAAkB,CAACoH,gBAAgB,CAAC;MAChDE,kBAAkB;MAClBE,kBAAkB,EAAEA,kBAAkB,GAAG,CAAC,GAAGA,kBAAkB,GAAG;IACpE;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}