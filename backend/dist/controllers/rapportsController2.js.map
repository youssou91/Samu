{"version":3,"file":"rapportsController2.js","names":["RendezVous","require","Utilisateur","asyncHandler","validationResult","logger","exports","obtenirPerformanceMedecins","req","res","dateDebut","dateFin","query","debut","Date","setMonth","getMonth","fin","performanceMedecins","aggregate","$match","$gte","$lte","statut","$in","medecin","$exists","$ne","$lookup","from","localField","foreignField","as","$unwind","$group","_id","$first","totalRdv","$sum","rdvTermines","$cond","$eq","rdvConfirmes","rdvAnnules","dureeTotaleMinutes","$divide","$subtract","nombrePatientsUniques","$addToSet","retards","$and","$gt","dureeTotaleRetardMinutes","$addFields","tauxFrequentation","$multiply","dureeMoyenneRdv","$add","tauxRetard","dureeMoyenneRetard","$size","$sort","resultats","map","med","id","nom","prenom","specialite","statistiques","Math","round","dureeMoyenneMinutes","total","pourcentage","nbMedecins","length","moyennes","reduce","acc","curr","filter","m","status","json","succes","message","donnees","obtenirSatisfactionPatients","medecinId","match","medecinNom","medecinPrenom","note","count","commentaires","$push","notes","$filter","input","cond","totalAvis","sommeNotes","noteMoyenne","$round","repartitionNotes","n","sort","a","b","flatMap","c","trim","medecins","find","role","select","lean","nbMedecinsAvecAvis","noteMoyenneGlobale","toString","module","buildGroupByFields"],"sources":["../../src/controllers/rapportsController2.js"],"sourcesContent":["const RendezVous = require('../models/RendezVous');\nconst Utilisateur = require('../models/Utilisateur');\nconst asyncHandler = require('express-async-handler');\nconst { validationResult } = require('express-validator');\nconst logger = require('../config/logger');\n\n/**\n * Obtenir les statistiques de performance des médecins\n * GET /api/rapports/performance-medecins\n * Accès: Admin\n */\nexports.obtenirPerformanceMedecins = asyncHandler(async (req, res) => {\n  const { dateDebut, dateFin } = req.query;\n  \n  // Valider les dates\n  const debut = dateDebut ? new Date(dateDebut) : new Date(new Date().setMonth(new Date().getMonth() - 3));\n  const fin = dateFin ? new Date(dateFin) : new Date();\n  \n  // Agrégation pour obtenir les statistiques de performance des médecins\n  const performanceMedecins = await RendezVous.aggregate([\n    // Filtrer par date et statut\n    {\n      $match: {\n        dateDebut: { $gte: debut, $lte: fin },\n        statut: { $in: ['termine', 'confirme', 'annule'] },\n        medecin: { $exists: true, $ne: null }\n      }\n    },\n    // Joindre les informations du médecin\n    {\n      $lookup: {\n        from: 'utilisateurs',\n        localField: 'medecin',\n        foreignField: '_id',\n        as: 'medecinInfo'\n      }\n    },\n    { $unwind: '$medecinInfo' },\n    // Grouper par médecin\n    {\n      $group: {\n        _id: '$medecin',\n        medecin: { $first: '$medecinInfo' },\n        totalRdv: { $sum: 1 },\n        rdvTermines: {\n          $sum: {\n            $cond: [{ $eq: ['$statut', 'termine'] }, 1, 0]\n          }\n        },\n        rdvConfirmes: {\n          $sum: {\n            $cond: [{ $eq: ['$statut', 'confirme'] }, 1, 0]\n          }\n        },\n        rdvAnnules: {\n          $sum: {\n            $cond: [{ $eq: ['$statut', 'annule'] }, 1, 0]\n          }\n        },\n        dureeTotaleMinutes: {\n          $sum: {\n            $cond: [\n              { $in: ['$statut', ['termine', 'confirme']] },\n              { $divide: [{ $subtract: ['$dateFin', '$dateDebut'] }, 1000 * 60] },\n              0\n            ]\n          }\n        },\n        nombrePatientsUniques: { $addToSet: '$patient' },\n        // Statistiques de retard\n        retards: {\n          $sum: {\n            $cond: [\n              { $and: [\n                { $gt: ['$retard.minutes', 0] },\n                { $in: ['$statut', ['termine', 'confirme']] }\n              ]},\n              1,\n              0\n            ]\n          }\n        },\n        dureeTotaleRetardMinutes: {\n          $sum: {\n            $cond: [\n              { $and: [\n                { $gt: ['$retard.minutes', 0] },\n                { $in: ['$statut', ['termine', 'confirme']] }\n              ]},\n              '$retard.minutes',\n              0\n            ]\n          }\n        }\n      }\n    },\n    // Calculer les indicateurs de performance\n    {\n      $addFields: {\n        tauxFrequentation: {\n          $multiply: [\n            {\n              $cond: [\n                { $eq: ['$totalRdv', 0] },\n                0,\n                { $divide: [\n                  { $subtract: ['$totalRdv', '$rdvAnnules'] },\n                  '$totalRdv'\n                ] }\n              ]\n            },\n            100\n          ]\n        },\n        dureeMoyenneRdv: {\n          $cond: [\n            { $eq: [\n              { $add: ['$rdvTermines', '$rdvConfirmes'] },\n              0\n            ]},\n            0,\n            { $divide: [\n              '$dureeTotaleMinutes',\n              { $add: ['$rdvTermines', '$rdvConfirmes'] }\n            ]}\n          ]\n        },\n        tauxRetard: {\n          $multiply: [\n            {\n              $cond: [\n                { $eq: [\n                  { $add: ['$rdvTermines', '$rdvConfirmes'] },\n                  0\n                ]},\n                0,\n                { $divide: [\n                  '$retards',\n                  { $add: ['$rdvTermines', '$rdvConfirmes'] }\n                ]}\n              ]\n            },\n            100\n          ]\n        },\n        dureeMoyenneRetard: {\n          $cond: [\n            { $eq: ['$retards', 0] },\n            0,\n            { $divide: ['$dureeTotaleRetardMinutes', '$retards'] }\n          ]\n        },\n        nombrePatientsUniques: { $size: '$nombrePatientsUniques' }\n      }\n    },\n    // Trier par taux de fréquentation décroissant\n    { $sort: { tauxFrequentation: -1 } }\n  ]);\n  \n  // Formater la réponse\n  const resultats = performanceMedecins.map(med => ({\n    medecin: {\n      id: med.medecin._id,\n      nom: med.medecin.nom,\n      prenom: med.medecin.prenom,\n      specialite: med.medecin.specialite\n    },\n    statistiques: {\n      totalRdv: med.totalRdv,\n      rdvTermines: med.rdvTermines,\n      rdvConfirmes: med.rdvConfirmes,\n      rdvAnnules: med.rdvAnnules,\n      nombrePatientsUniques: med.nombrePatientsUniques,\n      dureeTotaleMinutes: Math.round(med.dureeTotaleMinutes),\n      dureeMoyenneMinutes: Math.round(med.dureeMoyenneRdv * 10) / 10,\n      retards: {\n        total: med.retards,\n        dureeMoyenneMinutes: Math.round(med.dureeMoyenneRetard * 10) / 10,\n        pourcentage: Math.round(med.tauxRetard * 10) / 10\n      },\n      tauxFrequentation: Math.round(med.tauxFrequentation * 10) / 10\n    }\n  }));\n  \n  // Calculer les moyennes globales\n  const nbMedecins = performanceMedecins.length;\n  const moyennes = nbMedecins > 0 ? {\n    tauxFrequentation: performanceMedecins.reduce((acc, curr) => acc + curr.tauxFrequentation, 0) / nbMedecins,\n    dureeMoyenneRdv: performanceMedecins.reduce((acc, curr) => acc + curr.dureeMoyenneRdv, 0) / nbMedecins,\n    tauxRetard: performanceMedecins.reduce((acc, curr) => acc + curr.tauxRetard, 0) / nbMedecins,\n    dureeMoyenneRetard: performanceMedecins.reduce((acc, curr) => acc + (curr.retards > 0 ? curr.dureeMoyenneRetard : 0), 0) / \n      performanceMedecins.filter(m => m.retards > 0).length || 0\n  } : null;\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Statistiques de performance des médecins récupérées avec succès',\n    donnees: {\n      dateDebut: debut,\n      dateFin: fin,\n      resultats,\n      moyennes: moyennes ? {\n        tauxFrequentation: Math.round(moyennes.tauxFrequentation * 10) / 10,\n        dureeMoyenneMinutes: Math.round(moyennes.dureeMoyenneRdv * 10) / 10,\n        tauxRetard: Math.round(moyennes.tauxRetard * 10) / 10,\n        dureeMoyenneRetard: Math.round(moyennes.dureeMoyenneRetard * 10) / 10\n      } : null\n    }\n  });\n});\n\n/**\n * Obtenir les statistiques de satisfaction des patients\n * GET /api/rapports/satisfaction\n * Accès: Admin\n */\nexports.obtenirSatisfactionPatients = asyncHandler(async (req, res) => {\n  const { dateDebut, dateFin, medecinId } = req.query;\n  \n  // Valider les dates\n  const debut = dateDebut ? new Date(dateDebut) : new Date(new Date().setMonth(new Date().getMonth() - 6));\n  const fin = dateFin ? new Date(dateFin) : new Date();\n  \n  // Construire le filtre de base\n  const match = {\n    'avis.dateAvis': { $gte: debut, $lte: fin },\n    'avis.note': { $exists: true, $ne: null }\n  };\n  \n  // Ajouter le filtre par médecin si spécifié\n  if (medecinId) {\n    match.medecin = medecinId;\n  }\n  \n  // Agrégation pour obtenir les statistiques de satisfaction\n  const statistiques = await RendezVous.aggregate([\n    // Filtrer les rendez-vous avec avis\n    { $match: match },\n    // Dérouler les avis\n    { $unwind: '$avis' },\n    // Filtrer à nouveau après le déroulement\n    { $match: { 'avis.note': { $exists: true, $ne: null } } },\n    // Joindre les informations du médecin\n    {\n      $lookup: {\n        from: 'utilisateurs',\n        localField: 'medecin',\n        foreignField: '_id',\n        as: 'medecinInfo'\n      }\n    },\n    { $unwind: '$medecinInfo' },\n    // Grouper par médecin et par note\n    {\n      $group: {\n        _id: {\n          medecinId: '$medecin',\n          medecinNom: '$medecinInfo.nom',\n          medecinPrenom: '$medecinInfo.prenom',\n          note: '$avis.note'\n        },\n        count: { $sum: 1 },\n        commentaires: {\n          $push: {\n            $cond: [\n              { $and: [\n                { $ne: ['$avis.commentaire', ''] },\n                { $ne: ['$avis.commentaire', null] }\n              ]},\n              '$avis.commentaire',\n              '$$REMOVE'\n            ]\n          }\n        }\n      }\n    },\n    // Grouper par médecin pour calculer les totaux\n    {\n      $group: {\n        _id: {\n          medecinId: '$_id.medecinId',\n          medecinNom: '$_id.medecinNom',\n          medecinPrenom: '$_id.medecinPrenom'\n        },\n        notes: {\n          $push: {\n            note: '$_id.note',\n            count: '$count',\n            commentaires: {\n              $filter: {\n                input: '$commentaires',\n                as: 'commentaire',\n                cond: { $ne: ['$$commentaire', null] }\n              }\n            }\n          }\n        },\n        totalAvis: { $sum: '$count' },\n        sommeNotes: {\n          $sum: { $multiply: ['$_id.note', '$count'] }\n        }\n      }\n    },\n    // Calculer la note moyenne\n    {\n      $addFields: {\n        noteMoyenne: {\n          $round: [\n            { $divide: ['$sommeNotes', '$totalAvis'] },\n            1\n          ]\n        }\n      }\n    },\n    // Trier par note moyenne décroissante\n    { $sort: { noteMoyenne: -1 } }\n  ]);\n  \n  // Formater la réponse\n  const resultats = statistiques.map(med => ({\n    medecin: {\n      id: med._id.medecinId,\n      nom: med._id.medecinNom,\n      prenom: med._id.medecinPrenom\n    },\n    statistiques: {\n      totalAvis: med.totalAvis,\n      noteMoyenne: med.noteMoyenne,\n      repartitionNotes: med.notes.map(n => ({\n        note: n.note,\n        count: n.count,\n        pourcentage: Math.round((n.count / med.totalAvis) * 1000) / 10\n      })).sort((a, b) => b.note - a.note),\n      commentaires: med.notes\n        .flatMap(n => n.commentaires)\n        .filter(c => c && c.trim() !== '')\n    }\n  }));\n  \n  // Obtenir la liste des médecins pour le filtre\n  const medecins = await Utilisateur.find({ \n    role: 'medecin', \n    statut: 'actif'\n  })\n  .select('prenom nom specialite')\n  .sort({ nom: 1, prenom: 1 })\n  .lean();\n  \n  // Calculer les moyennes globales\n  const nbMedecinsAvecAvis = resultats.length;\n  const moyennes = nbMedecinsAvecAvis > 0 ? {\n    noteMoyenneGlobale: \n      Math.round((resultats.reduce((acc, curr) => acc + curr.statistiques.noteMoyenne, 0) / nbMedecinsAvecAvis) * 10) / 10,\n    totalAvis: resultats.reduce((acc, curr) => acc + curr.statistiques.totalAvis, 0)\n  } : null;\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Statistiques de satisfaction des patients récupérées avec succès',\n    donnees: {\n      dateDebut: debut,\n      dateFin: fin,\n      medecin: medecinId ? medecins.find(m => m._id.toString() === medecinId) : null,\n      medecins,\n      resultats,\n      moyennes\n    }\n  });\n});\n\n// Exporter la fonction utilitaire pour pouvoir l'utiliser dans d'autres fichiers\nmodule.exports.buildGroupByFields = require('./rapportsController').buildGroupByFields;\n"],"mappings":"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","ignoreList":[]}