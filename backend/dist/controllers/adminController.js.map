{"version":3,"file":"adminController.js","names":["Utilisateur","require","RendezVous","asyncHandler","validationResult","bcrypt","logger","exports","obtenirUtilisateurs","req","res","page","limit","role","statut","recherche","tri","ordre","query","regex","RegExp","$or","nom","prenom","email","sort","pageInt","parseInt","limitInt","skip","total","utilisateurs","Promise","all","countDocuments","find","select","lean","resultats","map","user","id","_id","civilite","telephone","specialite","dateCreation","dateDerniereConnexion","pagination","totalPages","Math","ceil","suivant","precedent","status","json","succes","message","donnees","creerUtilisateur","errors","isEmpty","erreurs","array","err","champ","param","msg","motDePasse","body","utilisateurExistant","findOne","sel","genSalt","motDePasseHache","hash","nouvelUtilisateur","create","undefined","creePar","utilisateurReponse","toObject","info","utilisateurCree","utilisateur","obtenirUtilisateur","findById","params","populate","mettreAJourUtilisateur","emailExiste","$ne","champsMiseAJour","modifiePar","dateMiseAJour","Date","now","utilisateurModifie","findByIdAndUpdate","$set","new","runValidators","champsModifies","Object","keys","reinitialiserMotDePasse","length","save","utilisateurCible","reinitialisationForcee","desactiverUtilisateur","utilisateurDesactive","updateMany","medecin","dateDebut","$gt","$in","motifAnnulation","reactiverUtilisateur","utilisateurReactive","supprimerUtilisateur","supprime","rendezVousAVenir","patient","utilisateurSupprime","obtenirStatistiquesAdmin","nombreUtilisateursParRole","aggregate","$match","$group","$sum","$sort","rendezVousParStatut","$gte","setFullYear","getFullYear","rendezVousParMois","setMonth","getMonth","$lte","annee","$year","mois","$month","$project","periode","$dateToString","format","date","$dateFromParts","year","month","day","derniersUtilisateurs","prochainsRendezVous","reduce","acc","curr","parRole","derniersInscrits","rendezVous","parStatut","parMois","prochains","exporterUtilisateurs","toISOString","toLowerCase","csv","csvData","stringify","header","quotedString","setHeader","split","send","exporterRendezVous","dateFin","medecinId","patientId","fin","setHours","rdv","_rdv$patient","_rdv$patient2","_rdv$patient3","_rdv$medecin","_rdv$medecin2","round","type","motif","notes","dateAnnulation","filtres"],"sources":["../../src/controllers/adminController.js"],"sourcesContent":["const Utilisateur = require('../models/Utilisateur');\nconst RendezVous = require('../models/RendezVous');\nconst asyncHandler = require('express-async-handler');\nconst { validationResult } = require('express-validator');\nconst bcrypt = require('bcryptjs');\nconst logger = require('../config/logger');\n\n/**\n * Obtenir la liste des utilisateurs avec pagination et filtres\n * GET /api/admin/utilisateurs\n * Accès: Admin uniquement\n */\nexports.obtenirUtilisateurs = asyncHandler(async (req, res) => {\n  const { \n    page = 1, \n    limit = 10, \n    role, \n    statut, \n    recherche, \n    tri = 'nom', \n    ordre = 'asc' \n  } = req.query;\n  \n  // Construire la requête\n  const query = {};\n  \n  // Filtres\n  if (role) {\n    query.role = role;\n  }\n  \n  if (statut) {\n    query.statut = statut;\n  }\n  \n  // Recherche par nom, prénom, email\n  if (recherche) {\n    const regex = new RegExp(recherche, 'i');\n    query.$or = [\n      { nom: regex },\n      { prenom: regex },\n      { email: regex }\n    ];\n  }\n  \n  // Options de tri\n  const sort = {};\n  sort[tri] = ordre === 'desc' ? -1 : 1;\n  \n  // Pagination\n  const pageInt = parseInt(page, 10);\n  const limitInt = parseInt(limit, 10);\n  const skip = (pageInt - 1) * limitInt;\n  \n  // Exécuter les requêtes en parallèle\n  const [total, utilisateurs] = await Promise.all([\n    Utilisateur.countDocuments(query),\n    Utilisateur.find(query)\n      .select('-motDePasse')\n      .sort(sort)\n      .skip(skip)\n      .limit(limitInt)\n      .lean()\n  ]);\n  \n  // Formater la réponse\n  const resultats = utilisateurs.map(user => ({\n    id: user._id,\n    civilite: user.civilite,\n    nom: user.nom,\n    prenom: user.prenom,\n    email: user.email,\n    telephone: user.telephone,\n    role: user.role,\n    specialite: user.specialite,\n    statut: user.statut,\n    dateCreation: user.dateCreation,\n    dateDerniereConnexion: user.dateDerniereConnexion\n  }));\n  \n  // Pagination\n  const pagination = {\n    total,\n    totalPages: Math.ceil(total / limitInt),\n    page: pageInt,\n    limit: limitInt\n  };\n  \n  if (pageInt < pagination.totalPages) {\n    pagination.suivant = pageInt + 1;\n  }\n  \n  if (pageInt > 1) {\n    pagination.precedent = pageInt - 1;\n  }\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Liste des utilisateurs récupérée avec succès',\n    donnees: {\n      utilisateurs: resultats,\n      pagination\n    }\n  });\n});\n\n/**\n * Créer un nouvel utilisateur (admin seulement)\n * POST /api/admin/utilisateurs\n * Accès: Admin uniquement\n */\nexports.creerUtilisateur = asyncHandler(async (req, res) => {\n  // Valider les données\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: errors.array().map(err => ({\n        champ: err.param,\n        message: err.msg\n      }))\n    });\n  }\n  \n  const {\n    civilite,\n    nom,\n    prenom,\n    email,\n    telephone,\n    role,\n    specialite,\n    motDePasse = 'MotDePasseParDefaut123!', // Mot de passe par défaut sécurisé\n    statut = 'actif'\n  } = req.body;\n  \n  // Vérifier si l'email existe déjà\n  const utilisateurExistant = await Utilisateur.findOne({ email });\n  \n  if (utilisateurExistant) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: [\n        { champ: 'email', message: 'Un utilisateur avec cet email existe déjà' }\n      ]\n    });\n  }\n  \n  // Hacher le mot de passe\n  const sel = await bcrypt.genSalt(10);\n  const motDePasseHache = await bcrypt.hash(motDePasse, sel);\n  \n  // Créer l'utilisateur\n  const nouvelUtilisateur = await Utilisateur.create({\n    civilite,\n    nom,\n    prenom,\n    email,\n    telephone,\n    role,\n    specialite: role === 'medecin' ? specialite : undefined,\n    motDePasse: motDePasseHache,\n    statut,\n    creePar: req.user.id\n  });\n  \n  // Ne pas renvoyer le mot de passe dans la réponse\n  const utilisateurReponse = nouvelUtilisateur.toObject();\n  delete utilisateurReponse.motDePasse;\n  \n  // Journaliser l'action\n  logger.info(`Nouvel utilisateur créé par l'admin ${req.user.id}`, {\n    utilisateurCree: nouvelUtilisateur._id,\n    role: nouvelUtilisateur.role,\n    statut: nouvelUtilisateur.statut\n  });\n  \n  res.status(201).json({\n    succes: true,\n    message: 'Utilisateur créé avec succès',\n    donnees: {\n      utilisateur: utilisateurReponse\n    }\n  });\n});\n\n/**\n * Obtenir les détails d'un utilisateur\n * GET /api/admin/utilisateurs/:id\n * Accès: Admin uniquement\n */\nexports.obtenirUtilisateur = asyncHandler(async (req, res) => {\n  const utilisateur = await Utilisateur.findById(req.params.id)\n    .select('-motDePasse')\n    .populate('creePar', 'prenom nom')\n    .populate('modifiePar', 'prenom nom')\n    .lean();\n  \n  if (!utilisateur) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun utilisateur trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Utilisateur récupéré avec succès',\n    donnees: {\n      utilisateur\n    }\n  });\n});\n\n/**\n * Mettre à jour un utilisateur\n * PUT /api/admin/utilisateurs/:id\n * Accès: Admin uniquement\n */\nexports.mettreAJourUtilisateur = asyncHandler(async (req, res) => {\n  // Valider les données\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: errors.array().map(err => ({\n        champ: err.param,\n        message: err.msg\n      }))\n    });\n  }\n  \n  const {\n    civilite,\n    nom,\n    prenom,\n    email,\n    telephone,\n    role,\n    specialite,\n    statut\n  } = req.body;\n  \n  // Vérifier si l'utilisateur existe\n  const utilisateur = await Utilisateur.findById(req.params.id);\n  \n  if (!utilisateur) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun utilisateur trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Vérifier si l'email est déjà utilisé par un autre utilisateur\n  if (email && email !== utilisateur.email) {\n    const emailExiste = await Utilisateur.findOne({ \n      email,\n      _id: { $ne: req.params.id }\n    });\n    \n    if (emailExiste) {\n      return res.status(400).json({\n        succes: false,\n        message: 'Erreur de validation',\n        erreurs: [\n          { champ: 'email', message: 'Cet email est déjà utilisé par un autre compte' }\n        ]\n      });\n    }\n  }\n  \n  // Mettre à jour l'utilisateur\n  const champsMiseAJour = {};\n  \n  if (civilite) champsMiseAJour.civilite = civilite;\n  if (nom) champsMiseAJour.nom = nom;\n  if (prenom) champsMiseAJour.prenom = prenom;\n  if (email) champsMiseAJour.email = email;\n  if (telephone) champsMiseAJour.telephone = telephone;\n  if (role) champsMiseAJour.role = role;\n  if (specialite) champsMiseAJour.specialite = role === 'medecin' ? specialite : undefined;\n  if (statut) champsMiseAJour.statut = statut;\n  \n  // Ajouter les métadonnées de mise à jour\n  champsMiseAJour.modifiePar = req.user.id;\n  champsMiseAJour.dateMiseAJour = Date.now();\n  \n  const utilisateurModifie = await Utilisateur.findByIdAndUpdate(\n    req.params.id,\n    { $set: champsMiseAJour },\n    { new: true, runValidators: true }\n  ).select('-motDePasse');\n  \n  // Journaliser l'action\n  logger.info(`Utilisateur modifié par l'admin ${req.user.id}`, {\n    utilisateurModifie: utilisateurModifie._id,\n    champsModifies: Object.keys(champsMiseAJour)\n  });\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Utilisateur mis à jour avec succès',\n    donnees: {\n      utilisateur: utilisateurModifie\n    }\n  });\n});\n\n/**\n * Réinitialiser le mot de passe d'un utilisateur\n * POST /api/admin/utilisateurs/:id/reinitialiser-mot-de-passe\n * Accès: Admin uniquement\n */\nexports.reinitialiserMotDePasse = asyncHandler(async (req, res) => {\n  const { motDePasse } = req.body;\n  \n  // Valider le mot de passe\n  if (!motDePasse || motDePasse.length < 8) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: [\n        { \n          champ: 'motDePasse', \n          message: 'Le mot de passe doit contenir au moins 8 caractères' \n        }\n      ]\n    });\n  }\n  \n  // Vérifier si l'utilisateur existe\n  const utilisateur = await Utilisateur.findById(req.params.id);\n  \n  if (!utilisateur) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun utilisateur trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Hacher le nouveau mot de passe\n  const sel = await bcrypt.genSalt(10);\n  const motDePasseHache = await bcrypt.hash(motDePasse, sel);\n  \n  // Mettre à jour le mot de passe\n  utilisateur.motDePasse = motDePasseHache;\n  utilisateur.dateMiseAJour = Date.now();\n  utilisateur.modifiePar = req.user.id;\n  \n  await utilisateur.save();\n  \n  // Journaliser l'action\n  logger.info(`Mot de passe réinitialisé par l'admin ${req.user.id}`, {\n    utilisateurCible: utilisateur._id,\n    reinitialisationForcee: true\n  });\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Mot de passe réinitialisé avec succès',\n    donnees: {}\n  });\n});\n\n/**\n * Désactiver un compte utilisateur\n * PATCH /api/admin/utilisateurs/:id/desactiver\n * Accès: Admin uniquement\n */\nexports.desactiverUtilisateur = asyncHandler(async (req, res) => {\n  // Vérifier si l'utilisateur existe\n  const utilisateur = await Utilisateur.findById(req.params.id);\n  \n  if (!utilisateur) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun utilisateur trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Vérifier si l'utilisateur n'est pas déjà désactivé\n  if (utilisateur.statut === 'inactif') {\n    return res.status(400).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: [\n        { champ: 'statut', message: 'Ce compte est déjà désactivé' }\n      ]\n    });\n  }\n  \n  // Désactiver l'utilisateur\n  const utilisateurDesactive = await Utilisateur.findByIdAndUpdate(\n    req.params.id,\n    { \n      $set: { \n        statut: 'inactif',\n        modifiePar: req.user.id,\n        dateMiseAJour: Date.now()\n      } \n    },\n    { new: true }\n  ).select('-motDePasse');\n  \n  // Annuler les rendez-vous à venir de l'utilisateur si c'est un médecin\n  if (utilisateur.role === 'medecin') {\n    await RendezVous.updateMany(\n      {\n        medecin: utilisateur._id,\n        dateDebut: { $gt: new Date() },\n        statut: { $in: ['confirme', 'en_attente'] }\n      },\n      {\n        $set: {\n          statut: 'annule',\n          motifAnnulation: 'Médecin indisponible',\n          modifiePar: req.user.id,\n          dateMiseAJour: Date.now()\n        }\n      }\n    );\n  }\n  \n  // Journaliser l'action\n  logger.info(`Utilisateur désactivé par l'admin ${req.user.id}`, {\n    utilisateurDesactive: utilisateur._id,\n    role: utilisateur.role\n  });\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Utilisateur désactivé avec succès',\n    donnees: {\n      utilisateur: utilisateurDesactive\n    }\n  });\n});\n\n/**\n * Réactiver un compte utilisateur\n * PATCH /api/admin/utilisateurs/:id/reactiver\n * Accès: Admin uniquement\n */\nexports.reactiverUtilisateur = asyncHandler(async (req, res) => {\n  // Vérifier si l'utilisateur existe\n  const utilisateur = await Utilisateur.findById(req.params.id);\n  \n  if (!utilisateur) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun utilisateur trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Vérifier si l'utilisateur n'est pas déjà actif\n  if (utilisateur.statut === 'actif') {\n    return res.status(400).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: [\n        { champ: 'statut', message: 'Ce compte est déjà actif' }\n      ]\n    });\n  }\n  \n  // Réactiver l'utilisateur\n  const utilisateurReactive = await Utilisateur.findByIdAndUpdate(\n    req.params.id,\n    { \n      $set: { \n        statut: 'actif',\n        modifiePar: req.user.id,\n        dateMiseAJour: Date.now()\n      } \n    },\n    { new: true }\n  ).select('-motDePasse');\n  \n  // Journaliser l'action\n  logger.info(`Utilisateur réactivé par l'admin ${req.user.id}`, {\n    utilisateurReactive: utilisateur._id,\n    role: utilisateur.role\n  });\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Utilisateur réactivé avec succès',\n    donnees: {\n      utilisateur: utilisateurReactive\n    }\n  });\n});\n\n/**\n * Supprimer un utilisateur (soft delete)\n * DELETE /api/admin/utilisateurs/:id\n * Accès: Admin uniquement\n */\nexports.supprimerUtilisateur = asyncHandler(async (req, res) => {\n  // Vérifier si l'utilisateur existe\n  const utilisateur = await Utilisateur.findById(req.params.id);\n  \n  if (!utilisateur) {\n    return res.status(404).json({\n      succes: false,\n      message: 'Ressource non trouvée',\n      erreurs: [\n        { champ: 'id', message: 'Aucun utilisateur trouvé avec cet ID' }\n      ]\n    });\n  }\n  \n  // Vérifier si l'utilisateur n'est pas déjà supprimé\n  if (utilisateur.supprime) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Erreur de validation',\n      erreurs: [\n        { champ: 'supprime', message: 'Ce compte a déjà été supprimé' }\n      ]\n    });\n  }\n  \n  // Vérifier si l'utilisateur a des rendez-vous à venir\n  const rendezVousAVenir = await RendezVous.findOne({\n    $or: [\n      { medecin: utilisateur._id },\n      { patient: utilisateur._id }\n    ],\n    dateDebut: { $gt: new Date() },\n    statut: { $in: ['confirme', 'en_attente'] }\n  });\n  \n  if (rendezVousAVenir) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Impossible de supprimer cet utilisateur',\n      erreurs: [\n        { \n          champ: 'rendezVous', \n          message: 'Cet utilisateur a des rendez-vous à venir. Veuillez d\\'abord les annuler ou les réaffecter.' \n        }\n      ]\n    });\n  }\n  \n  // Effectuer un soft delete\n  utilisateur.supprime = true;\n  utilisateur.email = `${utilisateur.email}_supprime_${Date.now()}`;\n  utilisateur.telephone = utilisateur.telephone ? `${utilisateur.telephone}_supprime_${Date.now()}` : null;\n  utilisateur.modifiePar = req.user.id;\n  utilisateur.dateMiseAJour = Date.now();\n  \n  await utilisateur.save();\n  \n  // Journaliser l'action\n  logger.info(`Utilisateur supprimé (soft delete) par l'admin ${req.user.id}`, {\n    utilisateurSupprime: utilisateur._id,\n    role: utilisateur.role\n  });\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Utilisateur supprimé avec succès',\n    donnees: {}\n  });\n});\n\n/**\n * Obtenir les statistiques d'administration\n * GET /api/admin/statistiques\n * Accès: Admin uniquement\n */\nexports.obtenirStatistiquesAdmin = asyncHandler(async (req, res) => {\n  // Compter les utilisateurs par rôle\n  const nombreUtilisateursParRole = await Utilisateur.aggregate([\n    { $match: { supprime: { $ne: true } } },\n    { $group: { _id: '$role', total: { $sum: 1 } } },\n    { $sort: { total: -1 } }\n  ]);\n  \n  // Compter les rendez-vous par statut\n  const rendezVousParStatut = await RendezVous.aggregate([\n    { \n      $match: { \n        dateDebut: { \n          $gte: new Date(new Date().setFullYear(new Date().getFullYear() - 1)) \n        } \n      } \n    },\n    { $group: { _id: '$statut', total: { $sum: 1 } } },\n    { $sort: { total: -1 } }\n  ]);\n  \n  // Rendez-vous par mois pour les 12 derniers mois\n  const rendezVousParMois = await RendezVous.aggregate([\n    { \n      $match: { \n        dateCreation: { \n          $gte: new Date(new Date().setMonth(new Date().getMonth() - 11)),\n          $lte: new Date()\n        } \n      } \n    },\n    {\n      $group: {\n        _id: { \n          annee: { $year: '$dateCreation' },\n          mois: { $month: '$dateCreation' }\n        },\n        total: { $sum: 1 }\n      }\n    },\n    { $sort: { '_id.annee': 1, '_id.mois': 1 } },\n    {\n      $project: {\n        _id: 0,\n        periode: {\n          $dateToString: {\n            format: '%Y-%m',\n            date: {\n              $dateFromParts: {\n                year: '$_id.annee',\n                month: '$_id.mois',\n                day: 1\n              }\n            }\n          }\n        },\n        total: 1\n      }\n    }\n  ]);\n  \n  // Derniers utilisateurs inscrits\n  const derniersUtilisateurs = await Utilisateur.find({ supprime: { $ne: true } })\n    .sort({ dateCreation: -1 })\n    .limit(5)\n    .select('prenom nom email role dateCreation')\n    .lean();\n  \n  // Prochains rendez-vous\n  const prochainsRendezVous = await RendezVous.find({\n    dateDebut: { $gte: new Date() },\n    statut: { $in: ['confirme', 'en_attente'] }\n  })\n  .sort({ dateDebut: 1 })\n  .limit(5)\n  .populate('patient', 'prenom nom')\n  .populate('medecin', 'prenom nom')\n  .select('dateDebut dateFin statut type motif')\n  .lean();\n  \n  res.status(200).json({\n    succes: true,\n    message: 'Statistiques administratives récupérées avec succès',\n    donnees: {\n      utilisateurs: {\n        total: nombreUtilisateursParRole.reduce((acc, curr) => acc + curr.total, 0),\n        parRole: nombreUtilisateursParRole,\n        derniersInscrits: derniersUtilisateurs\n      },\n      rendezVous: {\n        parStatut: rendezVousParStatut,\n        parMois: rendezVousParMois,\n        prochains: prochainsRendezVous\n      }\n    }\n  });\n});\n\n/**\n * Exporter les données utilisateurs (CSV/Excel)\n * GET /api/admin/export/utilisateurs\n * Accès: Admin uniquement\n */\nexports.exporterUtilisateurs = asyncHandler(async (req, res) => {\n  const { format = 'csv' } = req.query;\n  \n  // Récupérer tous les utilisateurs (non supprimés)\n  const utilisateurs = await Utilisateur.find({ supprime: { $ne: true } })\n    .select('-motDePasse')\n    .sort({ nom: 1, prenom: 1 })\n    .lean();\n  \n  // Formater les données pour l'export\n  const donnees = utilisateurs.map(user => ({\n    'ID': user._id,\n    'Civilité': user.civilite,\n    'Nom': user.nom,\n    'Prénom': user.prenom,\n    'Email': user.email,\n    'Téléphone': user.telephone || '',\n    'Rôle': user.role,\n    'Spécialité': user.specialite || '',\n    'Statut': user.statut,\n    'Date de création': user.dateCreation.toISOString(),\n    'Dernière connexion': user.dateDerniereConnexion ? user.dateDerniereConnexion.toISOString() : 'Jamais',\n    'Créé par': user.creePar || 'Système',\n    'Dernière modification': user.dateMiseAJour ? user.dateMiseAJour.toISOString() : 'Jamais',\n    'Modifié par': user.modifiePar || 'Personne'\n  }));\n  \n  // Si le format demandé est CSV\n  if (format.toLowerCase() === 'csv') {\n    // Convertir en CSV\n    const csv = require('csv-stringify/sync');\n    const csvData = csv.stringify(donnees, {\n      header: true,\n      quotedString: true\n    });\n    \n    // Définir les en-têtes de la réponse\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', 'attachment; filename=utilisateurs_export_' + new Date().toISOString().split('T')[0] + '.csv');\n    \n    // Envoyer le fichier CSV\n    return res.status(200).send(csvData);\n  }\n  \n  // Si le format demandé est Excel ou autre format non pris en charge\n  // Pour l'instant, on renvoie du JSON\n  res.status(200).json({\n    succes: true,\n    message: 'Export des utilisateurs réussi',\n    donnees: {\n      format: 'json',\n      total: donnees.length,\n      utilisateurs: donnees\n    }\n  });\n});\n\n/**\n * Exporter les données des rendez-vous (CSV/Excel)\n * GET /api/admin/export/rendez-vous\n * Accès: Admin uniquement\n */\nexports.exporterRendezVous = asyncHandler(async (req, res) => {\n  const { \n    format = 'csv',\n    dateDebut,\n    dateFin,\n    statut,\n    medecinId,\n    patientId\n  } = req.query;\n  \n  // Construire la requête\n  const query = {};\n  \n  // Filtres optionnels\n  if (dateDebut || dateFin) {\n    query.dateDebut = {};\n    if (dateDebut) query.dateDebut.$gte = new Date(dateDebut);\n    if (dateFin) {\n      const fin = new Date(dateFin);\n      fin.setHours(23, 59, 59, 999);\n      query.dateDebut.$lte = fin;\n    }\n  }\n  \n  if (statut) {\n    query.statut = statut;\n  }\n  \n  if (medecinId) {\n    query.medecin = medecinId;\n  }\n  \n  if (patientId) {\n    query.patient = patientId;\n  }\n  \n  // Récupérer les rendez-vous avec les informations des utilisateurs\n  const rendezVous = await RendezVous.find(query)\n    .populate('patient', 'prenom nom email telephone')\n    .populate('medecin', 'prenom nom specialite')\n    .populate('creePar', 'prenom nom')\n    .populate('modifiePar', 'prenom nom')\n    .sort({ dateDebut: -1 })\n    .lean();\n  \n  // Formater les données pour l'export\n  const donnees = rendezVous.map(rdv => ({\n    'ID': rdv._id,\n    'Date et heure de début': rdv.dateDebut.toISOString(),\n    'Date et heure de fin': rdv.dateFin.toISOString(),\n    'Durée (minutes)': Math.round((rdv.dateFin - rdv.dateDebut) / (1000 * 60)),\n    'Type': rdv.type || '',\n    'Motif': rdv.motif || '',\n    'Statut': rdv.statut,\n    'Notes': rdv.notes || '',\n    'Patient ID': rdv.patient?._id || '',\n    'Patient': rdv.patient ? `${rdv.patient.prenom} ${rdv.patient.nom}` : 'Inconnu',\n    'Email patient': rdv.patient?.email || '',\n    'Téléphone patient': rdv.patient?.telephone || '',\n    'Médecin ID': rdv.medecin?._id || '',\n    'Médecin': rdv.medecin ? `Dr. ${rdv.medecin.prenom} ${rdv.medecin.nom}` : 'Non attribué',\n    'Spécialité': rdv.medecin?.specialite || '',\n    'Date de création': rdv.dateCreation.toISOString(),\n    'Créé par': rdv.creePar ? `${rdv.creePar.prenom} ${rdv.creePar.nom}` : 'Système',\n    'Dernière modification': rdv.dateMiseAJour ? rdv.dateMiseAJour.toISOString() : 'Jamais',\n    'Modifié par': rdv.modifiePar ? `${rdv.modifiePar.prenom} ${rdv.modifiePar.nom}` : 'Personne',\n    'Annulé le': rdv.dateAnnulation ? rdv.dateAnnulation.toISOString() : '',\n    'Motif d\\'annulation': rdv.motifAnnulation || ''\n  }));\n  \n  // Si le format demandé est CSV\n  if (format.toLowerCase() === 'csv') {\n    // Convertir en CSV\n    const csv = require('csv-stringify/sync');\n    const csvData = csv.stringify(donnees, {\n      header: true,\n      quotedString: true\n    });\n    \n    // Définir les en-têtes de la réponse\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', `attachment; filename=rendez_vous_export_${new Date().toISOString().split('T')[0]}.csv`);\n    \n    // Envoyer le fichier CSV\n    return res.status(200).send(csvData);\n  }\n  \n  // Si le format demandé est Excel ou autre format non pris en charge\n  // Pour l'instant, on renvoie du JSON\n  res.status(200).json({\n    succes: true,\n    message: 'Export des rendez-vous réussi',\n    donnees: {\n      format: 'json',\n      total: donnees.length,\n      filtres: { dateDebut, dateFin, statut, medecinId, patientId },\n      rendezVous: donnees\n    }\n  });\n});\n"],"mappings":"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","ignoreList":[]}