{"version":3,"file":"notificationController.js","names":["RendezVous","require","Utilisateur","Parametre","Notification","asyncHandler","validationResult","moment","nodemailer","logger","transporter","createTransport","host","process","env","SMTP_HOST","port","SMTP_PORT","secure","SMTP_SECURE","auth","user","SMTP_USER","pass","SMTP_PASS","tls","rejectUnauthorized","NODE_ENV","verify","error","success","info","envoyerEmail","options","sendMail","from","EMAIL_FROM_NAME","EMAIL_FROM_ADDRESS","to","subject","text","html","messageId","message","envoyerSMS","telephone","enregistrerNotification","notificationData","notification","create","exports","envoyerNotificationRendezVous","rendezVousId","type","rendezVous","findById","populate","lean","Error","parametresPatient","patient","parametresNotifications","notificationsActivees","email","emailActif","sms","smsActif","rappel","rappelActif","parametresApp","findOne","variables","patientPrenom","prenom","patientNom","nom","medecinNom","medecin","medecinSpecialite","specialite","dateRdv","dateDebut","format","heureDebut","heureFin","dateFin","typeRdv","motif","lieu","lieuRdv","contactTelephone","telephoneContact","contactEmail","emailContact","urlAnnulation","CLIENT_URL","_id","urlConfirmation","delaiAnnulationHeures","sujet","contenuTexte","contenuHTML","contenuTexlet","resultats","_req","_req$user","resultatEmail","push","destinataire","succes","erreur","id","contenu","texte","statut","creePar","req","_req2","_req2$user","messageSMS","length","substring","resultatSMS","sid","some","r","stack","undefined","envoyerRappelsRendezVous","parametres","delaiRappelHeures","maintenant","Date","getTime","rendezVousARappeler","find","$gte","$lt","$ne","rdv","resultat","findByIdAndUpdate","$set","details","total","reussis","filter","echecs","obtenirHistoriqueNotifications","res","page","limit","query","pageInt","parseInt","limitInt","skip","notifications","Promise","all","countDocuments","sort","dateCreation","map","notif","dateEnvoi","pagination","totalPages","Math","ceil","suivant","precedent","status","json","donnees","marquerCommeLue","findOneAndUpdate","params","lu","dateLecture","new","erreurs","champ","marquerToutCommeLues","updateMany","nModified","notificationsModifiees","supprimerNotification","findOneAndDelete","obtenirNombreNotificationsNonLues","count"],"sources":["../../src/controllers/notificationController.js"],"sourcesContent":["const RendezVous = require('../models/RendezVous');\nconst Utilisateur = require('../models/Utilisateur');\nconst Parametre = require('../models/Parametre');\nconst Notification = require('../models/Notification');\nconst asyncHandler = require('express-async-handler');\nconst { validationResult } = require('express-validator');\nconst moment = require('moment');\nconst nodemailer = require('nodemailer');\nconst logger = require('../config/logger');\n\n// Configuration du transporteur d'emails\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST,\n  port: process.env.SMTP_PORT,\n  secure: process.env.SMTP_SECURE === 'true',\n  auth: {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASS\n  },\n  tls: {\n    rejectUnauthorized: process.env.NODE_ENV === 'production' // Ne pas vérifier le certificat en développement\n  }\n});\n\n// Vérifier la connexion SMTP\ntransporter.verify(function(error, success) {\n  if (error) {\n    logger.error('Erreur de connexion au serveur SMTP:', error);\n  } else {\n    logger.info('Serveur SMTP prêt à envoyer des emails');\n  }\n});\n\n/**\n * Envoyer une notification par email\n * @param {Object} options - Options de l'email\n * @param {string} options.to - Destinataire\n * @param {string} options.subject - Sujet de l'email\n * @param {string} options.text - Corps de l'email en texte brut\n * @param {string} options.html - Corps de l'email en HTML (optionnel)\n * @returns {Promise<Object>} - Résultat de l'envoi\n */\nconst envoyerEmail = async (options) => {\n  try {\n    const info = await transporter.sendMail({\n      from: `\"${process.env.EMAIL_FROM_NAME}\" <${process.env.EMAIL_FROM_ADDRESS}>`,\n      to: options.to,\n      subject: options.subject,\n      text: options.text,\n      html: options.html || options.text\n    });\n    \n    logger.info(`Email envoyé à ${options.to}: ${info.messageId}`);\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    logger.error(`Erreur lors de l'envoi de l'email à ${options.to}:`, error);\n    return { success: false, error: error.message };\n  }\n};\n\n/**\n * Envoyer une notification SMS (simulé)\n * @param {string} telephone - Numéro de téléphone du destinataire\n * @param {string} message - Message à envoyer\n * @returns {Promise<Object>} - Résultat de l'envoi\n */\nconst envoyerSMS = async (telephone, message) => {\n  // En environnement de développement, on simule l'envoi\n  if (process.env.NODE_ENV !== 'production') {\n    logger.info(`[SIMULATION] SMS envoyé à ${telephone}: ${message}`);\n    return { success: true, message: 'SMS simulé avec succès' };\n  }\n  \n  // En production, intégrer avec un service d'envoi de SMS comme Twilio, etc.\n  // Exemple avec Twilio (à décommenter et configurer si nécessaire) :\n  /*\n  try {\n    const client = require('twilio')(\n      process.env.TWILIO_ACCOUNT_SID,\n      process.env.TWILIO_AUTH_TOKEN\n    );\n    \n    const result = await client.messages.create({\n      body: message,\n      from: process.env.TWILIO_PHONE_NUMBER,\n      to: telephone\n    });\n    \n    logger.info(`SMS envoyé à ${telephone}: ${result.sid}`);\n    return { success: true, sid: result.sid };\n  } catch (error) {\n    logger.error(`Erreur lors de l'envoi du SMS à ${telephone}:`, error);\n    return { success: false, error: error.message };\n  }\n  */\n  \n  // Retourner un succès simulé si aucun service SMS n'est configuré\n  return { success: true, message: 'Aucun service SMS configuré, notification ignorée' };\n};\n\n/**\n * Enregistrer une notification dans la base de données\n * @param {Object} notificationData - Données de la notification\n * @returns {Promise<Object>} - Notification enregistrée\n */\nconst enregistrerNotification = async (notificationData) => {\n  try {\n    const notification = await Notification.create(notificationData);\n    return { success: true, notification };\n  } catch (error) {\n    logger.error('Erreur lors de l\\'enregistrement de la notification:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n/**\n * Envoyer une notification de confirmation de rendez-vous\n * @param {string} rendezVousId - ID du rendez-vous\n * @param {string} type - Type de notification (confirmation, rappel, annulation, etc.)\n * @returns {Promise<Object>} - Résultat de l'envoi\n */\nexports.envoyerNotificationRendezVous = async (rendezVousId, type = 'confirmation') => {\n  try {\n    // Récupérer le rendez-vous avec les informations du patient et du médecin\n    const rendezVous = await RendezVous.findById(rendezVousId)\n      .populate('patient', 'prenom nom email telephone parametresNotifications')\n      .populate('medecin', 'prenom nom specialite')\n      .populate('creePar', 'prenom nom')\n      .lean();\n    \n    if (!rendezVous) {\n      throw new Error('Rendez-vous non trouvé');\n    }\n    \n    // Vérifier si le patient a activé les notifications\n    const parametresPatient = rendezVous.patient.parametresNotifications || {};\n    const notificationsActivees = {\n      email: parametresPatient.emailActif !== false, // Par défaut à true si non défini\n      sms: parametresPatient.smsActif === true, // Par défaut à false si non défini\n      rappel: parametresPatient.rappelActif !== false // Par défaut à true si non défini\n    };\n    \n    // Si le type est un rappel et que les rappels sont désactivés, ne rien faire\n    if (type === 'rappel' && !notificationsActivees.rappel) {\n      return { success: true, message: 'Notifications de rappel désactivées pour ce patient' };\n    }\n    \n    // Récupérer les paramètres de l'application pour les modèles de notification\n    const parametresApp = await Parametre.findOne({}).lean() || {};\n    \n    // Variables pour le modèle de notification\n    const variables = {\n      patientPrenom: rendezVous.patient.prenom,\n      patientNom: rendezVous.patient.nom,\n      medecinNom: `${rendezVous.medecin.prenom} ${rendezVous.medecin.nom}`,\n      medecinSpecialite: rendezVous.medecin.specialite,\n      dateRdv: moment(rendezVous.dateDebut).format('dddd D MMMM YYYY'),\n      heureDebut: moment(rendezVous.dateDebut).format('HH:mm'),\n      heureFin: moment(rendezVous.dateFin).format('HH:mm'),\n      typeRdv: rendezVous.type || 'consultation',\n      motif: rendezVous.motif || 'Non spécifié',\n      lieu: parametresApp.lieuRdv || 'Notre cabinet',\n      contactTelephone: parametresApp.telephoneContact || '',\n      contactEmail: parametresApp.emailContact || '',\n      urlAnnulation: `${process.env.CLIENT_URL}/rendez-vous/${rendezVous._id}/annuler`,\n      urlConfirmation: `${process.env.CLIENT_URL}/rendez-vous/${rendezVous._id}/confirmer`,\n      delaiAnnulationHeures: parametresApp.delaiAnnulationHeures || 24\n    };\n    \n    // Déterminer le sujet et le contenu en fonction du type de notification\n    let sujet = '';\n    let contenuTexte = '';\n    let contenuHTML = '';\n    \n    switch (type) {\n      case 'confirmation':\n        sujet = `Confirmation de votre rendez-vous du ${variables.dateRdv}`;\n        contenuTexte = `Bonjour ${variables.patientPrenom},\\n\\n`;\n        contenuTexte += `Votre rendez-vous avec le Dr ${variables.medecinNom} (${variables.medecinSpecialite}) a été confirmé.\\n\\n`;\n        contenuTexte += `Détails du rendez-vous :\\n`;\n        contenuTexte += `- Date : ${variables.dateRdv}\\n`;\n        contenuTexte += `- Heure : ${variables.heureDebut} - ${variables.heureFin}\\n`;\n        contenuTexte += `- Type : ${variables.typeRdv}\\n`;\n        contenuTexte += `- Motif : ${variables.motif}\\n\\n`;\n        contenuTexte += `Lieu : ${variables.lieu}\\n\\n`;\n        contenuTexte += `Pour annuler ou reporter ce rendez-vous, veuillez nous contacter au moins ${variables.delaiAnnulationHeures} heures à l'avance.\\n\\n`;\n        contenuTexte += `Cordialement,\\nL'équipe médicale`;\n        \n        // Version HTML (simplifiée)\n        contenuHTML = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2>Confirmation de votre rendez-vous</h2>\n            <p>Bonjour ${variables.patientPrenom},</p>\n            <p>Votre rendez-vous avec le Dr ${variables.medecinNom} (${variables.medecinSpecialite}) a été confirmé.</p>\n            \n            <h3>Détails du rendez-vous :</h3>\n            <ul>\n              <li><strong>Date :</strong> ${variables.dateRdv}</li>\n              <li><strong>Heure :</strong> ${variables.heureDebut} - ${variables.heureFin}</li>\n              <li><strong>Type :</strong> ${variables.typeRdv}</li>\n              <li><strong>Motif :</strong> ${variables.motif}</li>\n            </ul>\n            \n            <p><strong>Lieu :</strong> ${variables.lieu}</p>\n            \n            <p>Pour annuler ou reporter ce rendez-vous, veuillez nous contacter au moins ${variables.delaiAnnulationHeures} heures à l'avance.</p>\n            \n            <p>Cordialement,<br>L'équipe médicale</p>\n          </div>\n        `;\n        break;\n        \n      case 'rappel':\n        sujet = `Rappel : Rendez-vous demain à ${variables.heureDebut}`;\n        contenuTexte = `Bonjour ${variables.patientPrenom},\\n\\n`;\n        contenuTexte += `Ceci est un rappel pour votre rendez-vous demain avec le Dr ${variables.medecinNom}.\\n\\n`;\n        contenuTexte += `Détails du rendez-vous :\\n`;\n        contenuTexte += `- Date : ${variables.dateRdv}\\n`;\n        contenuTexte += `- Heure : ${variables.heureDebut} - ${variables.heureFin}\\n`;\n        contenuTexte += `- Type : ${variables.typeRdv}\\n\\n`;\n        contenuTexte += `Lieu : ${variables.lieu}\\n\\n`;\n        contenuTexte += `En cas d'empêchement, merci de nous contacter au plus vite.\\n\\n`;\n        contenuTexte += `Cordialement,\\nL'équipe médicale`;\n        break;\n        \n      case 'annulation':\n        sujet = `Annulation de votre rendez-vous du ${variables.dateRdv}`;\n        contenuTexlet = `Bonjour ${variables.patientPrenom},\\n\\n`;\n        contenuTexte += `Votre rendez-vous du ${variables.dateRdv} à ${variables.heureDebut} avec le Dr ${variables.medecinNom} a été annulé.\\n\\n`;\n        contenuTexte += `Pour prendre un nouveau rendez-vous, veuillez nous contacter ou utiliser notre plateforme en ligne.\\n\\n`;\n        contenuTexte += `Cordialement,\\nL'équipe médicale`;\n        break;\n        \n      case 'modification':\n        sujet = `Modification de votre rendez-vous du ${variables.dateRdv}`;\n        contenuTexte = `Bonjour ${variables.patientPrenom},\\n\\n`;\n        contenuTexte += `Votre rendez-vous avec le Dr ${variables.medecinNom} a été modifié.\\n\\n`;\n        contenuTexte += `Nouveaux détails du rendez-vous :\\n`;\n        contenuTexte += `- Date : ${variables.dateRdv}\\n`;\n        contenuTexte += `- Heure : ${variables.heureDebut} - ${variables.heureFin}\\n`;\n        contenuTexte += `- Type : ${variables.typeRdv}\\n\\n`;\n        contenuTexte += `Lieu : ${variables.lieu}\\n\\n`;\n        contenuTexte += `Si ces nouveaux horaires ne vous conviennent pas, veuillez nous contacter.\\n\\n`;\n        contenuTexte += `Cordialement,\\nL'équipe médicale`;\n        break;\n        \n      default:\n        throw new Error(`Type de notification non pris en charge: ${type}`);\n    }\n    \n    // Tableau pour stocker les résultats des envois\n    const resultats = [];\n    \n    // Envoyer par email si activé et si l'email est disponible\n    if (notificationsActivees.email && rendezVous.patient.email) {\n      const resultatEmail = await envoyerEmail({\n        to: rendezVous.patient.email,\n        subject: sujet,\n        text: contenuTexte,\n        html: contenuHTML || contenuTexte\n      });\n      \n      resultats.push({\n        type: 'email',\n        destinataire: rendezVous.patient.email,\n        succes: resultatEmail.success,\n        messageId: resultatEmail.messageId,\n        erreur: resultatEmail.error\n      });\n      \n      // Enregistrer la notification dans la base de données\n      await enregistrerNotification({\n        type: `email_${type}`,\n        destinataire: {\n          id: rendezVous.patient._id,\n          type: 'patient',\n          email: rendezVous.patient.email\n        },\n        contenu: {\n          sujet,\n          texte: contenuTexte,\n          html: contenuHTML\n        },\n        statut: resultatEmail.success ? 'envoyee' : 'erreur',\n        rendezVous: rendezVous._id,\n        erreur: resultatEmail.error,\n        creePar: req?.user?.id || 'système'\n      });\n    }\n    \n    // Envoyer par SMS si activé et si le numéro est disponible\n    if (notificationsActivees.sms && rendezVous.patient.telephone) {\n      // Limiter la longueur du message SMS\n      const messageSMS = contenuTexte.length > 160 \n        ? contenuTexte.substring(0, 157) + '...' \n        : contenuTexte;\n      \n      const resultatSMS = await envoyerSMS(\n        rendezVous.patient.telephone,\n        `${sujet}\\n\\n${messageSMS}`\n      );\n      \n      resultats.push({\n        type: 'sms',\n        destinataire: rendezVous.patient.telephone,\n        succes: resultatSMS.success,\n        messageId: resultatSMS.sid,\n        erreur: resultatSMS.error\n      });\n      \n      // Enregistrer la notification dans la base de données\n      await enregistrerNotification({\n        type: `sms_${type}`,\n        destinataire: {\n          id: rendezVous.patient._id,\n          type: 'patient',\n          telephone: rendezVous.patient.telephone\n        },\n        contenu: {\n          texte: messageSMS\n        },\n        statut: resultatSMS.success ? 'envoyee' : 'erreur',\n        rendezVous: rendezVous._id,\n        erreur: resultatSMS.error,\n        creePar: req?.user?.id || 'système'\n      });\n    }\n    \n    return {\n      success: resultats.some(r => r.succes),\n      resultats\n    };\n    \n  } catch (error) {\n    logger.error(`Erreur lors de l'envoi de la notification (${type}):`, error);\n    return {\n      success: false,\n      error: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    };\n  }\n};\n\n/**\n * Envoyer les rappels de rendez-vous\n * Méthode à appeler via un travail planifié (cron job)\n */\nexports.envoyerRappelsRendezVous = async () => {\n  try {\n    // Récupérer les paramètres de l'application\n    const parametres = await Parametre.findOne({}).lean() || {};\n    const delaiRappelHeures = parametres.delaiRappelHeures || 24;\n    \n    // Calculer la date de début et de fin pour les rappels\n    const maintenant = new Date();\n    const dateDebut = new Date(maintenant.getTime() + (delaiRappelHeures * 60 * 60 * 1000));\n    const dateFin = new Date(dateDebut.getTime() + (60 * 60 * 1000)); // Fenêtre d'1 heure\n    \n    // Récupérer les rendez-vous à rappeler\n    const rendezVousARappeler = await RendezVous.find({\n      dateDebut: { $gte: dateDebut, $lt: dateFin },\n      statut: 'confirme',\n      'notifications.rappelEnvoye': { $ne: true }\n    })\n    .populate('patient', 'prenom nom email telephone parametresNotifications')\n    .populate('medecin', 'prenom nom specialite')\n    .lean();\n    \n    logger.info(`Envoi des rappels pour ${rendezVousARappeler.length} rendez-vous`);\n    \n    // Envoyer les rappels\n    const resultats = [];\n    \n    for (const rdv of rendezVousARappeler) {\n      try {\n        const resultat = await this.envoyerNotificationRendezVous(rdv._id, 'rappel');\n        \n        // Marquer le rappel comme envoyé\n        if (resultat.success) {\n          await RendezVous.findByIdAndUpdate(rdv._id, {\n            $set: { 'notifications.rappelEnvoye': true, 'notifications.dateRappel': new Date() }\n          });\n        }\n        \n        resultats.push({\n          rendezVousId: rdv._id,\n          patient: rdv.patient.email || rdv.patient.telephone,\n          success: resultat.success,\n          details: resultat.resultats\n        });\n      } catch (error) {\n        logger.error(`Erreur lors de l'envoi du rappel pour le RDV ${rdv._id}:`, error);\n        resultats.push({\n          rendezVousId: rdv._id,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n    \n    return {\n      success: true,\n      total: rendezVousARappeler.length,\n      reussis: resultats.filter(r => r.success).length,\n      echecs: resultats.filter(r => !r.success).length,\n      resultats\n    };\n    \n  } catch (error) {\n    logger.error('Erreur lors de l\\'envoi des rappels de rendez-vous:', error);\n    return {\n      success: false,\n      error: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    };\n  }\n};\n\n/**\n * Obtenir l'historique des notifications d'un utilisateur\n * GET /api/notifications\n * Accès: Utilisateur authentifié\n */\nexports.obtenirHistoriqueNotifications = asyncHandler(async (req, res) => {\n  const { page = 1, limit = 10, type, statut } = req.query;\n  \n  // Construire la requête\n  const query = {};\n  \n  // Filtrer par destinataire (l'utilisateur connecté)\n  query['destinataire.id'] = req.user.id;\n  \n  // Filtres optionnels\n  if (type) {\n    query.type = type;\n  }\n  \n  if (statut) {\n    query.statut = statut;\n  }\n  \n  // Pagination\n  const pageInt = parseInt(page, 10);\n  const limitInt = parseInt(limit, 10);\n  const skip = (pageInt - 1) * limitInt;\n  \n  // Exécuter les requêtes en parallèle\n  const [total, notifications] = await Promise.all([\n    Notification.countDocuments(query),\n    Notification.find(query)\n      .sort({ dateCreation: -1 })\n      .skip(skip)\n      .limit(limitInt)\n      .populate('rendezVous', 'dateDebut dateFin statut')\n      .populate('creePar', 'prenom nom role')\n      .lean()\n  ]);\n  \n  // Formater la réponse\n  const resultats = notifications.map(notif => ({\n    id: notif._id,\n    type: notif.type,\n    statut: notif.statut,\n    dateEnvoi: notif.dateCreation,\n    contenu: notif.contenu,\n    rendezVous: notif.rendezVous,\n    creePar: notif.creePar,\n    erreur: notif.erreur\n  }));\n  \n  // Pagination\n  const pagination = {\n    total,\n    totalPages: Math.ceil(total / limitInt),\n    page: pageInt,\n    limit: limitInt\n  };\n  \n  if (pageInt < pagination.totalPages) {\n    pagination.suivant = pageInt + 1;\n  }\n  \n  if (pageInt > 1) {\n    pagination.precedent = pageInt - 1;\n  }\n  \n  res.status(200).json({\n    success: true,\n    message: 'Historique des notifications récupéré avec succès',\n    donnees: {\n      notifications: resultats,\n      pagination\n    }\n  });\n});\n\n/**\n * Marquer une notification comme lue\n * PATCH /api/notifications/:id/lu\n * Accès: Utilisateur authentifié (propriétaire de la notification)\n */\nexports.marquerCommeLue = asyncHandler(async (req, res) => {\n  const notification = await Notification.findOneAndUpdate(\n    { \n      _id: req.params.id,\n      'destinataire.id': req.user.id\n    },\n    { \n      $set: { \n        lu: true,\n        dateLecture: new Date()\n      } \n    },\n    { new: true }\n  );\n  \n  if (!notification) {\n    return res.status(404).json({\n      success: false,\n      message: 'Notification non trouvée ou accès non autorisé',\n      erreurs: [\n        { champ: 'id', message: 'Aucune notification trouvée avec cet ID ou accès refusé' }\n      ]\n    });\n  }\n  \n  res.status(200).json({\n    success: true,\n    message: 'Notification marquée comme lue avec succès',\n    donnees: {\n      notification: {\n        id: notification._id,\n        lu: notification.lu,\n        dateLecture: notification.dateLecture\n      }\n    }\n  });\n});\n\n/**\n * Marquer toutes les notifications comme lues\n * PATCH /api/notifications/marquer-comme-lues\n * Accès: Utilisateur authentifié\n */\nexports.marquerToutCommeLues = asyncHandler(async (req, res) => {\n  const resultat = await Notification.updateMany(\n    { \n      'destinataire.id': req.user.id,\n      lu: { $ne: true }\n    },\n    { \n      $set: { \n        lu: true,\n        dateLecture: new Date()\n      } \n    }\n  );\n  \n  res.status(200).json({\n    success: true,\n    message: `${resultat.nModified} notifications marquées comme lues`,\n    donnees: {\n      notificationsModifiees: resultat.nModified\n    }\n  });\n});\n\n/**\n * Supprimer une notification\n * DELETE /api/notifications/:id\n * Accès: Utilisateur authentifié (propriétaire de la notification)\n */\nexports.supprimerNotification = asyncHandler(async (req, res) => {\n  const notification = await Notification.findOneAndDelete({\n    _id: req.params.id,\n    'destinataire.id': req.user.id\n  });\n  \n  if (!notification) {\n    return res.status(404).json({\n      success: false,\n      message: 'Notification non trouvée ou accès non autorisé',\n      erreurs: [\n        { champ: 'id', message: 'Aucune notification trouvée avec cet ID ou accès refusé' }\n      ]\n    });\n  }\n  \n  res.status(200).json({\n    success: true,\n    message: 'Notification supprimée avec succès',\n    donnees: {}\n  });\n});\n\n/**\n * Obtenir le nombre de notifications non lues\n * GET /api/notifications/non-lues\n * Accès: Utilisateur authentifié\n */\nexports.obtenirNombreNotificationsNonLues = asyncHandler(async (req, res) => {\n  const count = await Notification.countDocuments({\n    'destinataire.id': req.user.id,\n    lu: { $ne: true }\n  });\n  \n  res.status(200).json({\n    success: true,\n    message: 'Nombre de notifications non lues récupéré avec succès',\n    donnees: {\n      count\n    }\n  });\n});\n"],"mappings":"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","ignoreList":[]}