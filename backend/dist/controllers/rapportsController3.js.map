{"version":3,"file":"rapportsController3.js","names":["RendezVous","require","Utilisateur","asyncHandler","validationResult","logger","buildGroupByFields","exports","genererRapportPersonnalise","req","res","typeRapport","dateDebut","dateFin","groupBy","filtres","colonnes","body","typesRapportValides","includes","status","json","succes","message","erreurs","champ","join","debut","Date","setMonth","getMonth","fin","isNaN","getTime","groupByValides","groupByValide","pipeline","buildRapportRendezVous","buildRapportPatients","buildRapportMedecins","resultats","aggregate","donnees","nbResultats","length","error","erreur","process","env","NODE_ENV","undefined","stack","$match","$gte","$lte","$lookup","from","localField","foreignField","as","$unwind","path","preserveNullAndEmptyArrays","$group","_id","count","$sum","dureeTotale","$subtract","statuts","$push","types","medecins","$addToSet","patients","montantTotal","montantPaye","$cond","$eq","retards","$and","$gt","$in","dureeTotaleRetard","notesSatisfaction","$ne","commentairesSatisfaction","$addFields","dureeMoyenne","$divide","tauxRetard","$multiply","dureeMoyenneRetard","noteMoyenneSatisfaction","$size","$avg","nbPatientsUniques","nbMedecinsUniques","tauxPaiement","$sort","$project","periode","$switch","branches","case","then","$concat","$substr","$toString","$dateToString","format","date","$dateFromParts","year","month","day","default","nbRendezVous","nbRetards","$filter","input","cond","patient","$first","premierRendezVous","$min","dernierRendezVous","$max","frequenceMoyenne","id","nom","prenom","email","telephone","dateNaissance","genre","adresse","ville","codePostal","pays","dateInscription","statut","module"],"sources":["../../src/controllers/rapportsController3.js"],"sourcesContent":["const RendezVous = require('../models/RendezVous');\nconst Utilisateur = require('../models/Utilisateur');\nconst asyncHandler = require('express-async-handler');\nconst { validationResult } = require('express-validator');\nconst logger = require('../config/logger');\nconst { buildGroupByFields } = require('./rapportsController');\n\n/**\n * Générer un rapport personnalisé - Partie 1/2\n * POST /api/rapports/personnalise\n * Accès: Admin\n */\nexports.genererRapportPersonnalise = asyncHandler(async (req, res) => {\n  const { \n    typeRapport, \n    dateDebut, \n    dateFin, \n    groupBy = 'month',\n    filtres = {},\n    colonnes = []\n  } = req.body;\n  \n  // Valider le type de rapport\n  const typesRapportValides = [\n    'rendez-vous',\n    'patients',\n    'medecins',\n    'financier',\n    'satisfaction',\n    'performance'\n  ];\n  \n  if (!typesRapportValides.includes(typeRapport)) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Type de rapport non valide',\n      erreurs: [\n        { \n          champ: 'typeRapport', \n          message: `Le type de rapport doit être l'un des suivants: ${typesRapportValides.join(', ')}`\n        }\n      ]\n    });\n  }\n  \n  // Valider les dates\n  const debut = dateDebut ? new Date(dateDebut) : new Date(new Date().setMonth(new Date().getMonth() - 1));\n  const fin = dateFin ? new Date(dateFin) : new Date();\n  \n  if (isNaN(debut.getTime()) || isNaN(fin.getTime())) {\n    return res.status(400).json({\n      succes: false,\n      message: 'Format de date invalide',\n      erreurs: [\n        { champ: 'dateDebut', message: 'Format de date invalide (utilisez YYYY-MM-DD)' },\n        { champ: 'dateFin', message: 'Format de date invalide (utilisez YYYY-MM-DD)' }\n      ]\n    });\n  }\n  \n  // Valider le groupBy\n  const groupByValides = ['day', 'week', 'month', 'year', 'medecin', 'patient', 'type'];\n  const groupByValide = groupByValides.includes(groupBy) ? groupBy : 'month';\n  \n  // Construire la requête de base en fonction du type de rapport\n  let pipeline = [];\n  \n  switch (typeRapport) {\n    case 'rendez-vous':\n      // Pipeline pour le rapport des rendez-vous\n      pipeline = buildRapportRendezVous(debut, fin, groupByValide, filtres, colonnes);\n      break;\n      \n    case 'patients':\n      // Pipeline pour le rapport des patients\n      pipeline = buildRapportPatients(debut, fin, groupByValide, filtres, colonnes);\n      break;\n      \n    case 'medecins':\n      // Pipeline pour le rapport des médecins\n      pipeline = buildRapportMedecins(debut, fin, groupByValide, filtres, colonnes);\n      break;\n      \n    default:\n      return res.status(400).json({\n        succes: false,\n        message: 'Type de rapport non implémenté',\n        erreurs: [\n          { \n            champ: 'typeRapport', \n            message: `Le type de rapport \"${typeRapport}\" n'est pas encore implémenté`\n          }\n        ]\n      });\n  }\n  \n  try {\n    // Exécuter la requête d'agrégation\n    const resultats = await RendezVous.aggregate(pipeline);\n    \n    // Formater la réponse\n    res.status(200).json({\n      succes: true,\n      message: 'Rapport généré avec succès',\n      donnees: {\n        typeRapport,\n        dateDebut: debut,\n        dateFin: fin,\n        groupBy: groupByValide,\n        nbResultats: resultats.length,\n        resultats\n      }\n    });\n    \n  } catch (error) {\n    logger.error('Erreur lors de la génération du rapport personnalisé:', error);\n    \n    res.status(500).json({\n      succes: false,\n      message: 'Une erreur est survenue lors de la génération du rapport',\n      erreur: process.env.NODE_ENV === 'development' ? error.message : undefined,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    });\n  }\n});\n\n/**\n * Construire le pipeline pour le rapport des rendez-vous\n * @param {Date} debut - Date de début\n * @param {Date} fin - Date de fin\n * @param {string} groupBy - Type de regroupement\n * @param {Object} filtres - Filtres supplémentaires\n * @param {Array} colonnes - Colonnes à inclure\n * @returns {Array} - Pipeline d'agrégation\n */\nfunction buildRapportRendezVous(debut, fin, groupBy, filtres = {}, colonnes = []) {\n  return [\n    // Filtrer par date\n    {\n      $match: {\n        dateDebut: { $gte: debut, $lte: fin },\n        ...filtres\n      }\n    },\n    // Joindre les informations du médecin et du patient\n    {\n      $lookup: {\n        from: 'utilisateurs',\n        localField: 'medecin',\n        foreignField: '_id',\n        as: 'medecinInfo'\n      }\n    },\n    { $unwind: { path: '$medecinInfo', preserveNullAndEmptyArrays: true } },\n    {\n      $lookup: {\n        from: 'utilisateurs',\n        localField: 'patient',\n        foreignField: '_id',\n        as: 'patientInfo'\n      }\n    },\n    { $unwind: { path: '$patientInfo', preserveNullAndEmptyArrays: true } },\n    // Grouper selon les critères demandés\n    {\n      $group: {\n        _id: buildGroupByFields(groupBy, '$dateDebut'),\n        count: { $sum: 1 },\n        dureeTotale: {\n          $sum: { $subtract: ['$dateFin', '$dateDebut'] }\n        },\n        // Autres statistiques à agréger\n        statuts: { $push: '$statut' },\n        types: { $push: '$type' },\n        medecins: { $addToSet: '$medecinInfo._id' },\n        patients: { $addToSet: '$patientInfo._id' },\n        // Pour les statistiques financières\n        montantTotal: { $sum: '$montant' },\n        montantPaye: {\n          $sum: {\n            $cond: [{ $eq: ['$statutPaiement', 'paye'] }, '$montant', 0]\n          }\n        },\n        // Pour les retards\n        retards: {\n          $sum: {\n            $cond: [\n              { $and: [\n                { $gt: ['$retard.minutes', 0] },\n                { $in: ['$statut', ['termine', 'confirme']] }\n              ]},\n              1,\n              0\n            ]\n          }\n        },\n        dureeTotaleRetard: {\n          $sum: {\n            $cond: [\n              { $and: [\n                { $gt: ['$retard.minutes', 0] },\n                { $in: ['$statut', ['termine', 'confirme']] }\n              ]},\n              '$retard.minutes',\n              0\n            ]\n          }\n        },\n        // Pour les notes de satisfaction\n        notesSatisfaction: {\n          $push: {\n            $cond: [\n              { $and: [\n                { $gt: ['$avis.note', 0] },\n                { $ne: ['$avis.note', null] }\n              ]},\n              '$avis.note',\n              '$$REMOVE'\n            ]\n          }\n        },\n        commentairesSatisfaction: {\n          $push: {\n            $cond: [\n              { $and: [\n                { $ne: ['$avis.commentaire', ''] },\n                { $ne: ['$avis.commentaire', null] }\n              ]},\n              '$avis.commentaire',\n              '$$REMOVE'\n            ]\n          }\n        }\n      }\n    },\n    // Calculer les indicateurs dérivés\n    {\n      $addFields: {\n        dureeMoyenne: {\n          $cond: [\n            { $eq: ['$count', 0] },\n            0,\n            { $divide: ['$dureeTotale', '$count'] }\n          ]\n        },\n        tauxRetard: {\n          $cond: [\n            { $eq: ['$count', 0] },\n            0,\n            { $multiply: [\n              { $divide: ['$retards', '$count'] },\n              100\n            ]}\n          ]\n        },\n        dureeMoyenneRetard: {\n          $cond: [\n            { $eq: ['$retards', 0] },\n            0,\n            { $divide: ['$dureeTotaleRetard', '$retards'] }\n          ]\n        },\n        noteMoyenneSatisfaction: {\n          $cond: [\n            { $eq: [{ $size: '$notesSatisfaction' }, 0] },\n            null,\n            { $avg: '$notesSatisfaction' }\n          ]\n        },\n        nbPatientsUniques: { $size: '$patients' },\n        nbMedecinsUniques: { $size: '$medecins' },\n        tauxPaiement: {\n          $cond: [\n            { $eq: ['$montantTotal', 0] },\n            0,\n            { $multiply: [\n              { $divide: ['$montantPaye', '$montantTotal'] },\n              100\n            ]}\n          ]\n        }\n      }\n    },\n    // Trier par la période\n    { $sort: { '_id.annee': 1, '_id.mois': 1, '_id.semaine': 1, '_id.date': 1 } },\n    // Projeter les champs finaux\n    {\n      $project: {\n        _id: 0,\n        periode: {\n          $switch: {\n            branches: [\n              { case: { $ne: ['$_id.date', undefined] }, then: '$_id.date' },\n              { \n                case: { $and: [\n                  { $ne: ['$_id.semaine', undefined] },\n                  { $ne: ['$_id.annee', undefined] }\n                ]},\n                then: { $concat: [\n                  'S', \n                  { $substr: [{ $toString: '$_id.semaine' }, 0, -1] },\n                  ' ',\n                  { $toString: '$_id.annee' }\n                ]}\n              },\n              { \n                case: { $and: [\n                  { $ne: ['$_id.mois', undefined] },\n                  { $ne: ['$_id.annee', undefined] }\n                ]},\n                then: { $dateToString: {\n                  format: '%Y-%m',\n                  date: {\n                    $dateFromParts: {\n                      year: '$_id.annee',\n                      month: '$_id.mois',\n                      day: 1\n                    }\n                  }\n                }}\n              },\n              { \n                case: { $ne: ['$_id.annee', undefined] },\n                then: { $toString: '$_id.annee' }\n              },\n              { \n                case: { $ne: ['$_id.medecin', undefined] },\n                then: 'Médecin: ' + { $toString: '$_id.medecin' }\n              },\n              { \n                case: { $ne: ['$_id.patient', undefined] },\n                then: 'Patient: ' + { $toString: '$_id.patient' }\n              },\n              { \n                case: { $ne: ['$_id.type', undefined] },\n                then: 'Type: ' + '$_id.type'\n              }\n            ],\n            default: 'Non spécifié'\n          }\n        },\n        // Inclure dynamiquement les colonnes demandées\n        ...(colonnes.includes('nbRendezVous') && { nbRendezVous: 1 }),\n        ...(colonnes.includes('dureeTotale') && { dureeTotale: 1 }),\n        ...(colonnes.includes('dureeMoyenne') && { dureeMoyenne: 1 }),\n        ...(colonnes.includes('nbRetards') && { nbRetards: 1 }),\n        ...(colonnes.includes('tauxRetard') && { tauxRetard: 1 }),\n        ...(colonnes.includes('dureeMoyenneRetard') && { dureeMoyenneRetard: 1 }),\n        ...(colonnes.includes('noteMoyenneSatisfaction') && { noteMoyenneSatisfaction: 1 }),\n        ...(colonnes.includes('nbPatientsUniques') && { nbPatientsUniques: 1 }),\n        ...(colonnes.includes('nbMedecinsUniques') && { nbMedecinsUniques: 1 }),\n        ...(colonnes.includes('montantTotal') && { montantTotal: 1 }),\n        ...(colonnes.includes('montantPaye') && { montantPaye: 1 }),\n        ...(colonnes.includes('tauxPaiement') && { tauxPaiement: 1 }),\n        // Inclure les détails si demandés\n        ...(colonnes.includes('details') && {\n          statuts: 1,\n          types: 1,\n          commentairesSatisfaction: {\n            $filter: {\n              input: '$commentairesSatisfaction',\n              as: 'commentaire',\n              cond: { $ne: ['$$commentaire', null] }\n            }\n          }\n        })\n      }\n    }\n  ];\n}\n\n/**\n * Construire le pipeline pour le rapport des patients\n * @param {Date} debut - Date de début\n * @param {Date} fin - Date de fin\n * @param {string} groupBy - Type de regroupement\n * @param {Object} filtres - Filtres supplémentaires\n * @param {Array} colonnes - Colonnes à inclure\n * @returns {Array} - Pipeline d'agrégation\n */\nfunction buildRapportPatients(debut, fin, groupBy, filtres = {}, colonnes = []) {\n  return [\n    // Filtrer par date\n    {\n      $match: {\n        dateDebut: { $gte: debut, $lte: fin },\n        ...filtres\n      }\n    },\n    // Joindre les informations du patient\n    {\n      $lookup: {\n        from: 'utilisateurs',\n        localField: 'patient',\n        foreignField: '_id',\n        as: 'patientInfo'\n      }\n    },\n    { $unwind: { path: '$patientInfo', preserveNullAndEmptyArrays: true } },\n    // Grouper par patient\n    {\n      $group: {\n        _id: '$patient',\n        patient: { $first: '$patientInfo' },\n        nbRendezVous: { $sum: 1 },\n        montantTotal: { $sum: '$montant' },\n        montantPaye: {\n          $sum: {\n            $cond: [{ $eq: ['$statutPaiement', 'paye'] }, '$montant', 0]\n          }\n        },\n        premierRendezVous: { $min: '$dateDebut' },\n        dernierRendezVous: { $max: '$dateDebut' },\n        statuts: { $push: '$statut' },\n        types: { $push: '$type' },\n        medecins: { $addToSet: '$medecin' },\n        notesSatisfaction: {\n          $push: {\n            $cond: [\n              { $and: [\n                { $gt: ['$avis.note', 0] },\n                { $ne: ['$avis.note', null] }\n              ]},\n              '$avis.note',\n              '$$REMOVE'\n            ]\n          }\n        },\n        commentairesSatisfaction: {\n          $push: {\n            $cond: [\n              { $and: [\n                { $ne: ['$avis.commentaire', ''] },\n                { $ne: ['$avis.commentaire', null] }\n              ]},\n              '$avis.commentaire',\n              '$$REMOVE'\n            ]\n          }\n        }\n      }\n    },\n    // Calculer les indicateurs dérivés\n    {\n      $addFields: {\n        noteMoyenneSatisfaction: {\n          $cond: [\n            { $eq: [{ $size: '$notesSatisfaction' }, 0] },\n            null,\n            { $avg: '$notesSatisfaction' }\n          ]\n        },\n        nbMedecinsUniques: { $size: '$medecins' },\n        tauxPaiement: {\n          $cond: [\n            { $eq: ['$montantTotal', 0] },\n            0,\n            { $multiply: [\n              { $divide: ['$montantPaye', '$montantTotal'] },\n              100\n            ]}\n          ]\n        },\n        frequenceMoyenne: {\n          $cond: [\n            { $eq: ['$nbRendezVous', 1] },\n            null,\n            {\n              $divide: [\n                { $subtract: ['$dernierRendezVous', '$premierRendezVous'] },\n                { $multiply: [\n                  { $subtract: ['$nbRendezVous', 1] },\n                  24 * 60 * 60 * 1000 // Convertir en jours\n                ]}\n              ]\n            }\n          ]\n        }\n      }\n    },\n    // Trier par nombre de rendez-vous décroissant\n    { $sort: { nbRendezVous: -1 } },\n    // Projeter les champs finaux\n    {\n      $project: {\n        _id: 0,\n        patient: {\n          id: '$patient._id',\n          nom: '$patient.nom',\n          prenom: '$patient.prenom',\n          email: '$patient.email',\n          telephone: '$patient.telephone',\n          dateNaissance: '$patient.dateNaissance',\n          genre: '$patient.genre',\n          adresse: '$patient.adresse',\n          ville: '$patient.ville',\n          codePostal: '$patient.codePostal',\n          pays: '$patient.pays',\n          dateInscription: '$patient.dateCreation',\n          statut: '$patient.statut'\n        },\n        // Inclure dynamiquement les colonnes demandées\n        ...(colonnes.includes('nbRendezVous') && { nbRendezVous: 1 }),\n        ...(colonnes.includes('premierRendezVous') && { premierRendezVous: 1 }),\n        ...(colonnes.includes('dernierRendezVous') && { dernierRendezVous: 1 }),\n        ...(colonnes.includes('frequenceMoyenne') && { frequenceMoyenne: 1 }),\n        ...(colonnes.includes('montantTotal') && { montantTotal: 1 }),\n        ...(colonnes.includes('montantPaye') && { montantPaye: 1 }),\n        ...(colonnes.includes('tauxPaiement') && { tauxPaiement: 1 }),\n        ...(colonnes.includes('noteMoyenneSatisfaction') && { noteMoyenneSatisfaction: 1 }),\n        ...(colonnes.includes('nbMedecinsUniques') && { nbMedecinsUniques: 1 }),\n        // Inclure les détails si demandés\n        ...(colonnes.includes('details') && {\n          statuts: 1,\n          types: 1,\n          commentairesSatisfaction: {\n            $filter: {\n              input: '$commentairesSatisfaction',\n              as: 'commentaire',\n              cond: { $ne: ['$$commentaire', null] }\n            }\n          }\n        })\n      }\n    }\n  ];\n}\n\n// Exporter les fonctions pour les tests\nmodule.exports = {\n  ...module.exports,\n  buildRapportRendezVous,\n  buildRapportPatients\n};\n"],"mappings":"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","ignoreList":[]}